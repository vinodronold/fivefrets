/**
 * The css property used for elevation. In most cases this should not be changed. It is exposed
 * as a variable for abstraction / easy use when needing to reference the property directly, for
 * example in a `will-change` rule.
 */
/**
 * The default duration value for elevation transitions.
 */
/**
 * The default easing value for elevation transitions.
 */
/**
 * Applies the correct css rules to an element to give it the elevation specified by $z-value.
 * The $z-value must be between 0 and 24.
 */
/**
 * Returns a string that can be used as the value for a `transition` property for elevation.
 * Calling this function directly is useful in situations where a component needs to transition
 * more than one property.
 *
 * ```scss
 * .foo {
 *   transition: mdc-elevation-transition-rule(), opacity 100ms ease;
 *   will-change: $mdc-elevation-property, opacity;
 * }
 * ```
 */
/**
 * Applies the correct css rules needed to have an element transition between elevations.
 * This mixin should be applied to elements whose elevation values will change depending on their
 * context (e.g. when active or disabled).
 */
/*
5A5A8C
ff8080

fd256e
*/
/*
  Precomputed linear color channel values, for use in contrast calculations.
  See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests

  Algorithm, for c in 0 to 255:
  f(c) {
    c = c / 255;
    return c < 0.03928 ? c / 12.92 : Math.pow((c + 0.055) / 1.055, 2.4);
  }

  This lookup table is needed since there is no `pow` in SASS.
*/
/**
 * Calculate the luminance for a color.
 * See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
 */
/**
 * Calculate the contrast ratio between two colors.
 * See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
 */
/**
 * Determine whether to use dark or light text on top of given color.
 * Returns "dark" for dark text and "light" for light text.
 */
/*
  Main theme colors.
  If you're a user customizing your color scheme in SASS, these are probably the only variables you need to change.
*/
/* Indigo 500 */
/* Pink A200 */
/* White */
/* Which set of text colors to use for each main theme color (light or dark) */
/* Text colors according to light vs dark and text type */
/* Primary text colors for each of the theme colors */
/**
 * Applies the correct theme color style to the specified property.
 * $property is typically color or background-color, but can be any CSS property that accepts color values.
 * $style should be one of the map keys in $mdc-theme-property-values (_variables.scss).
 */
/**
 * Creates a rule to be used in MDC-Web components for dark theming, and applies the provided contents.
 * Should provide the $root-selector option if applied to anything other than the root selector.
 * When used with a modifier class, provide a second argument of `true` for the $compound parameter
 * to specify that this should be attached as a compound class.
 *
 * Usage example:
 *
 * ```scss
 * .mdc-foo {
 *   color: black;
 *
 *   @include mdc-theme-dark {
 *     color: white;
 *   }
 *
 *   &__bar {
 *     background: black;
 *
 *     @include mdc-theme-dark(".mdc-foo") {
 *       background: white;
 *     }
 *   }
 * }
 *
 * .mdc-foo--disabled {
 *   opacity: .38;
 *
 *   @include mdc-theme-dark(".mdc-foo", true) {
 *     opacity: .5;
 *   }
 * }
 * ```
 */
:root {
  --mdc-theme-primary: #076969;
  --mdc-theme-accent: #af790c;
  --mdc-theme-background: #fff;
  --mdc-theme-text-primary-on-primary: white;
  --mdc-theme-text-secondary-on-primary: rgba(255, 255, 255, 0.7);
  --mdc-theme-text-hint-on-primary: rgba(255, 255, 255, 0.5);
  --mdc-theme-text-disabled-on-primary: rgba(255, 255, 255, 0.5);
  --mdc-theme-text-icon-on-primary: rgba(255, 255, 255, 0.5);
  --mdc-theme-text-primary-on-accent: white;
  --mdc-theme-text-secondary-on-accent: rgba(255, 255, 255, 0.7);
  --mdc-theme-text-hint-on-accent: rgba(255, 255, 255, 0.5);
  --mdc-theme-text-disabled-on-accent: rgba(255, 255, 255, 0.5);
  --mdc-theme-text-icon-on-accent: rgba(255, 255, 255, 0.5);
  --mdc-theme-text-primary-on-background: rgba(0, 0, 0, 0.87);
  --mdc-theme-text-secondary-on-background: rgba(0, 0, 0, 0.54);
  --mdc-theme-text-hint-on-background: rgba(0, 0, 0, 0.38);
  --mdc-theme-text-disabled-on-background: rgba(0, 0, 0, 0.38);
  --mdc-theme-text-icon-on-background: rgba(0, 0, 0, 0.38);
  --mdc-theme-text-primary-on-light: rgba(0, 0, 0, 0.87);
  --mdc-theme-text-secondary-on-light: rgba(0, 0, 0, 0.54);
  --mdc-theme-text-hint-on-light: rgba(0, 0, 0, 0.38);
  --mdc-theme-text-disabled-on-light: rgba(0, 0, 0, 0.38);
  --mdc-theme-text-icon-on-light: rgba(0, 0, 0, 0.38);
  --mdc-theme-text-primary-on-dark: white;
  --mdc-theme-text-secondary-on-dark: rgba(255, 255, 255, 0.7);
  --mdc-theme-text-hint-on-dark: rgba(255, 255, 255, 0.5);
  --mdc-theme-text-disabled-on-dark: rgba(255, 255, 255, 0.5);
  --mdc-theme-text-icon-on-dark: rgba(255, 255, 255, 0.5); }

/* Special case, so that .mdc-theme--background changes background color, not text color. */
.mdc-theme--background {
  background-color: #fff;
  background-color: var(--mdc-theme-background, #fff); }

.mdc-theme--primary {
  color: #076969 !important;
  color: var(--mdc-theme-primary, #076969) !important; }

.mdc-theme--accent {
  color: #af790c !important;
  color: var(--mdc-theme-accent, #af790c) !important; }

.mdc-theme--text-primary-on-primary {
  color: white !important;
  color: var(--mdc-theme-text-primary-on-primary, white) !important; }

.mdc-theme--text-secondary-on-primary {
  color: rgba(255, 255, 255, 0.7) !important;
  color: var(--mdc-theme-text-secondary-on-primary, rgba(255, 255, 255, 0.7)) !important; }

.mdc-theme--text-hint-on-primary {
  color: rgba(255, 255, 255, 0.5) !important;
  color: var(--mdc-theme-text-hint-on-primary, rgba(255, 255, 255, 0.5)) !important; }

.mdc-theme--text-disabled-on-primary {
  color: rgba(255, 255, 255, 0.5) !important;
  color: var(--mdc-theme-text-disabled-on-primary, rgba(255, 255, 255, 0.5)) !important; }

.mdc-theme--text-icon-on-primary {
  color: rgba(255, 255, 255, 0.5) !important;
  color: var(--mdc-theme-text-icon-on-primary, rgba(255, 255, 255, 0.5)) !important; }

.mdc-theme--text-primary-on-accent {
  color: white !important;
  color: var(--mdc-theme-text-primary-on-accent, white) !important; }

.mdc-theme--text-secondary-on-accent {
  color: rgba(255, 255, 255, 0.7) !important;
  color: var(--mdc-theme-text-secondary-on-accent, rgba(255, 255, 255, 0.7)) !important; }

.mdc-theme--text-hint-on-accent {
  color: rgba(255, 255, 255, 0.5) !important;
  color: var(--mdc-theme-text-hint-on-accent, rgba(255, 255, 255, 0.5)) !important; }

.mdc-theme--text-disabled-on-accent {
  color: rgba(255, 255, 255, 0.5) !important;
  color: var(--mdc-theme-text-disabled-on-accent, rgba(255, 255, 255, 0.5)) !important; }

.mdc-theme--text-icon-on-accent {
  color: rgba(255, 255, 255, 0.5) !important;
  color: var(--mdc-theme-text-icon-on-accent, rgba(255, 255, 255, 0.5)) !important; }

.mdc-theme--text-primary-on-background {
  color: rgba(0, 0, 0, 0.87) !important;
  color: var(--mdc-theme-text-primary-on-background, rgba(0, 0, 0, 0.87)) !important; }

.mdc-theme--text-secondary-on-background {
  color: rgba(0, 0, 0, 0.54) !important;
  color: var(--mdc-theme-text-secondary-on-background, rgba(0, 0, 0, 0.54)) !important; }

.mdc-theme--text-hint-on-background {
  color: rgba(0, 0, 0, 0.38) !important;
  color: var(--mdc-theme-text-hint-on-background, rgba(0, 0, 0, 0.38)) !important; }

.mdc-theme--text-disabled-on-background {
  color: rgba(0, 0, 0, 0.38) !important;
  color: var(--mdc-theme-text-disabled-on-background, rgba(0, 0, 0, 0.38)) !important; }

.mdc-theme--text-icon-on-background {
  color: rgba(0, 0, 0, 0.38) !important;
  color: var(--mdc-theme-text-icon-on-background, rgba(0, 0, 0, 0.38)) !important; }

.mdc-theme--text-primary-on-light {
  color: rgba(0, 0, 0, 0.87) !important;
  color: var(--mdc-theme-text-primary-on-light, rgba(0, 0, 0, 0.87)) !important; }

.mdc-theme--text-secondary-on-light {
  color: rgba(0, 0, 0, 0.54) !important;
  color: var(--mdc-theme-text-secondary-on-light, rgba(0, 0, 0, 0.54)) !important; }

.mdc-theme--text-hint-on-light {
  color: rgba(0, 0, 0, 0.38) !important;
  color: var(--mdc-theme-text-hint-on-light, rgba(0, 0, 0, 0.38)) !important; }

.mdc-theme--text-disabled-on-light {
  color: rgba(0, 0, 0, 0.38) !important;
  color: var(--mdc-theme-text-disabled-on-light, rgba(0, 0, 0, 0.38)) !important; }

.mdc-theme--text-icon-on-light {
  color: rgba(0, 0, 0, 0.38) !important;
  color: var(--mdc-theme-text-icon-on-light, rgba(0, 0, 0, 0.38)) !important; }

.mdc-theme--text-primary-on-dark {
  color: white !important;
  color: var(--mdc-theme-text-primary-on-dark, white) !important; }

.mdc-theme--text-secondary-on-dark {
  color: rgba(255, 255, 255, 0.7) !important;
  color: var(--mdc-theme-text-secondary-on-dark, rgba(255, 255, 255, 0.7)) !important; }

.mdc-theme--text-hint-on-dark {
  color: rgba(255, 255, 255, 0.5) !important;
  color: var(--mdc-theme-text-hint-on-dark, rgba(255, 255, 255, 0.5)) !important; }

.mdc-theme--text-disabled-on-dark {
  color: rgba(255, 255, 255, 0.5) !important;
  color: var(--mdc-theme-text-disabled-on-dark, rgba(255, 255, 255, 0.5)) !important; }

.mdc-theme--text-icon-on-dark {
  color: rgba(255, 255, 255, 0.5) !important;
  color: var(--mdc-theme-text-icon-on-dark, rgba(255, 255, 255, 0.5)) !important; }

/* CSS rules for using primary and accent as background colors. */
.mdc-theme--primary-bg {
  background-color: #076969 !important;
  background-color: var(--mdc-theme-primary, #076969) !important; }

.mdc-theme--accent-bg {
  background-color: #af790c !important;
  background-color: var(--mdc-theme-accent, #af790c) !important; }

/**
 * The css property used for elevation. In most cases this should not be changed. It is exposed
 * as a variable for abstraction / easy use when needing to reference the property directly, for
 * example in a `will-change` rule.
 */
/**
 * The default duration value for elevation transitions.
 */
/**
 * The default easing value for elevation transitions.
 */
/**
 * Applies the correct css rules to an element to give it the elevation specified by $z-value.
 * The $z-value must be between 0 and 24.
 */
/**
 * Returns a string that can be used as the value for a `transition` property for elevation.
 * Calling this function directly is useful in situations where a component needs to transition
 * more than one property.
 *
 * ```scss
 * .foo {
 *   transition: mdc-elevation-transition-rule(), opacity 100ms ease;
 *   will-change: $mdc-elevation-property, opacity;
 * }
 * ```
 */
/**
 * Applies the correct css rules needed to have an element transition between elevations.
 * This mixin should be applied to elements whose elevation values will change depending on their
 * context (e.g. when active or disabled).
 */
/*
  Precomputed linear color channel values, for use in contrast calculations.
  See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests

  Algorithm, for c in 0 to 255:
  f(c) {
    c = c / 255;
    return c < 0.03928 ? c / 12.92 : Math.pow((c + 0.055) / 1.055, 2.4);
  }

  This lookup table is needed since there is no `pow` in SASS.
*/
/**
 * Calculate the luminance for a color.
 * See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
 */
/**
 * Calculate the contrast ratio between two colors.
 * See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
 */
/**
 * Determine whether to use dark or light text on top of given color.
 * Returns "dark" for dark text and "light" for light text.
 */
/*
  Main theme colors.
  If you're a user customizing your color scheme in SASS, these are probably the only variables you need to change.
*/
/* Indigo 500 */
/* Pink A200 */
/* White */
/* Which set of text colors to use for each main theme color (light or dark) */
/* Text colors according to light vs dark and text type */
/* Primary text colors for each of the theme colors */
/** MDC Ripple keyframes are split into their own file so that _mixins.scss can rely on them. */
@keyframes mdc-ripple-fg-radius-in {
  from {
    transform: translate(var(--mdc-ripple-fg-translate-start, 0)) scale(1);
    animation-timing-function: cubic-bezier(0.4, 0, 0.2, 1); }
  to {
    transform: translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1)); } }

@keyframes mdc-ripple-fg-opacity-in {
  from {
    opacity: 0;
    animation-timing-function: linear; }
  to {
    opacity: 1; } }

@keyframes mdc-ripple-fg-opacity-out {
  from {
    opacity: 1;
    animation-timing-function: linear; }
  to {
    opacity: 0; } }

/*
  Precomputed linear color channel values, for use in contrast calculations.
  See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests

  Algorithm, for c in 0 to 255:
  f(c) {
    c = c / 255;
    return c < 0.03928 ? c / 12.92 : Math.pow((c + 0.055) / 1.055, 2.4);
  }

  This lookup table is needed since there is no `pow` in SASS.
*/
/**
 * Calculate the luminance for a color.
 * See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
 */
/**
 * Calculate the contrast ratio between two colors.
 * See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
 */
/**
 * Determine whether to use dark or light text on top of given color.
 * Returns "dark" for dark text and "light" for light text.
 */
/*
  Main theme colors.
  If you're a user customizing your color scheme in SASS, these are probably the only variables you need to change.
*/
/* Indigo 500 */
/* Pink A200 */
/* White */
/* Which set of text colors to use for each main theme color (light or dark) */
/* Text colors according to light vs dark and text type */
/* Primary text colors for each of the theme colors */
/**
 * Applies the correct theme color style to the specified property.
 * $property is typically color or background-color, but can be any CSS property that accepts color values.
 * $style should be one of the map keys in $mdc-theme-property-values (_variables.scss).
 */
/**
 * Creates a rule to be used in MDC-Web components for dark theming, and applies the provided contents.
 * Should provide the $root-selector option if applied to anything other than the root selector.
 * When used with a modifier class, provide a second argument of `true` for the $compound parameter
 * to specify that this should be attached as a compound class.
 *
 * Usage example:
 *
 * ```scss
 * .mdc-foo {
 *   color: black;
 *
 *   @include mdc-theme-dark {
 *     color: white;
 *   }
 *
 *   &__bar {
 *     background: black;
 *
 *     @include mdc-theme-dark(".mdc-foo") {
 *       background: white;
 *     }
 *   }
 * }
 *
 * .mdc-foo--disabled {
 *   opacity: .38;
 *
 *   @include mdc-theme-dark(".mdc-foo", true) {
 *     opacity: .5;
 *   }
 * }
 * ```
 */
.mdc-button {
  --mdc-ripple-surface-width: 0;
  --mdc-ripple-surface-height: 0;
  --mdc-ripple-fg-size: 0;
  --mdc-ripple-left: 0;
  --mdc-ripple-top: 0;
  --mdc-ripple-fg-scale: 1;
  --mdc-ripple-fg-translate-end: 0;
  --mdc-ripple-fg-translate-start: 0;
  will-change: transform, opacity;
  -webkit-tap-highlight-color: transparent;
  color: rgba(0, 0, 0, 0.87);
  color: var(--mdc-theme-text-primary-on-light, rgba(0, 0, 0, 0.87));
  display: inline-block;
  position: relative;
  min-width: 64px;
  height: 36px;
  padding: 0 16px;
  border: none;
  border-radius: 2px;
  outline: none;
  background: transparent;
  font-size: 14px;
  font-weight: 500;
  letter-spacing: .04em;
  line-height: 36px;
  text-align: center;
  text-decoration: none;
  text-transform: uppercase;
  overflow: hidden;
  vertical-align: middle;
  user-select: none;
  box-sizing: border-box;
  -webkit-appearance: none; }

.mdc-button:not(.mdc-ripple-upgraded):hover::before, .mdc-button:not(.mdc-ripple-upgraded):focus::before, .mdc-button:not(.mdc-ripple-upgraded):active::after {
  transition-duration: 85ms;
  opacity: .6; }

.mdc-button::before {
  background-color: rgba(0, 0, 0, 0.06);
  position: absolute;
  top: calc(50% - 100%);
  left: calc(50% - 100%);
  width: 200%;
  height: 200%;
  transition: opacity 250ms linear;
  border-radius: 50%;
  opacity: 0;
  pointer-events: none;
  content: ""; }

.mdc-button.mdc-ripple-upgraded::before {
  top: calc(50% - 100%);
  left: calc(50% - 100%);
  width: 200%;
  height: 200%;
  transform: scale(0);
  transform: scale(var(--mdc-ripple-fg-scale, 0)); }

.mdc-button.mdc-ripple-upgraded--background-focused::before {
  opacity: .99999; }

.mdc-button.mdc-ripple-upgraded--background-active-fill::before {
  transition-duration: 120ms;
  opacity: 1; }

.mdc-button.mdc-ripple-upgraded--unbounded::before {
  top: calc(50% - 50%);
  top: var(--mdc-ripple-top, calc(50% - 50%));
  left: calc(50% - 50%);
  left: var(--mdc-ripple-left, calc(50% - 50%));
  width: 100%;
  width: var(--mdc-ripple-fg-size, 100%);
  height: 100%;
  height: var(--mdc-ripple-fg-size, 100%);
  transform: scale(0);
  transform: scale(var(--mdc-ripple-fg-scale, 0)); }

.mdc-button::after {
  background-color: rgba(0, 0, 0, 0.06);
  position: absolute;
  top: calc(50% - 100%);
  left: calc(50% - 100%);
  width: 200%;
  height: 200%;
  transition: opacity 250ms linear;
  border-radius: 50%;
  opacity: 0;
  pointer-events: none;
  content: ""; }

.mdc-button.mdc-ripple-upgraded::after {
  top: 0;
  left: 0;
  width: 100%;
  width: var(--mdc-ripple-fg-size, 100%);
  height: 100%;
  height: var(--mdc-ripple-fg-size, 100%);
  transform: scale(0);
  transform-origin: center center;
  opacity: 0; }

.mdc-button:not(.mdc-ripple-upgraded--unbounded)::after {
  transform-origin: center center; }

.mdc-button.mdc-ripple-upgraded--unbounded::after {
  top: 0;
  top: var(--mdc-ripple-top, 0);
  left: 0;
  left: var(--mdc-ripple-left, 0);
  width: 100%;
  width: var(--mdc-ripple-fg-size, 100%);
  height: 100%;
  height: var(--mdc-ripple-fg-size, 100%);
  transform: scale(0);
  transform-origin: center center; }

.mdc-button.mdc-ripple-upgraded--foreground-activation::after {
  animation: 300ms mdc-ripple-fg-radius-in forwards, 83ms mdc-ripple-fg-opacity-in forwards; }

.mdc-button.mdc-ripple-upgraded--foreground-deactivation::after {
  transform: translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1));
  animation: 83ms mdc-ripple-fg-opacity-out; }

.mdc-button:not(.mdc-ripple-upgraded) {
  -webkit-tap-highlight-color: rgba(0, 0, 0, 0.18); }

.mdc-button--theme-dark,
.mdc-theme--dark .mdc-button {
  --mdc-ripple-surface-width: 0;
  --mdc-ripple-surface-height: 0;
  --mdc-ripple-fg-size: 0;
  --mdc-ripple-left: 0;
  --mdc-ripple-top: 0;
  --mdc-ripple-fg-scale: 1;
  --mdc-ripple-fg-translate-end: 0;
  --mdc-ripple-fg-translate-start: 0;
  will-change: transform, opacity;
  -webkit-tap-highlight-color: transparent;
  color: white;
  color: var(--mdc-theme-text-primary-on-dark, white); }

.mdc-button--theme-dark:not(.mdc-ripple-upgraded):hover::before, .mdc-button--theme-dark:not(.mdc-ripple-upgraded):focus::before, .mdc-button--theme-dark:not(.mdc-ripple-upgraded):active::after,
.mdc-theme--dark .mdc-button:not(.mdc-ripple-upgraded):hover::before,
.mdc-theme--dark .mdc-button:not(.mdc-ripple-upgraded):focus::before,
.mdc-theme--dark .mdc-button:not(.mdc-ripple-upgraded):active::after {
  transition-duration: 85ms;
  opacity: .6; }

.mdc-button--theme-dark::before,
.mdc-theme--dark .mdc-button::before {
  background-color: rgba(255, 255, 255, 0.14);
  position: absolute;
  top: calc(50% - 100%);
  left: calc(50% - 100%);
  width: 200%;
  height: 200%;
  transition: opacity 250ms linear;
  border-radius: 50%;
  opacity: 0;
  pointer-events: none;
  content: ""; }

.mdc-button--theme-dark.mdc-ripple-upgraded::before,
.mdc-theme--dark .mdc-button.mdc-ripple-upgraded::before {
  top: calc(50% - 100%);
  left: calc(50% - 100%);
  width: 200%;
  height: 200%;
  transform: scale(0);
  transform: scale(var(--mdc-ripple-fg-scale, 0)); }

.mdc-button--theme-dark.mdc-ripple-upgraded--background-focused::before,
.mdc-theme--dark .mdc-button.mdc-ripple-upgraded--background-focused::before {
  opacity: .99999; }

.mdc-button--theme-dark.mdc-ripple-upgraded--background-active-fill::before,
.mdc-theme--dark .mdc-button.mdc-ripple-upgraded--background-active-fill::before {
  transition-duration: 120ms;
  opacity: 1; }

.mdc-button--theme-dark.mdc-ripple-upgraded--unbounded::before,
.mdc-theme--dark .mdc-button.mdc-ripple-upgraded--unbounded::before {
  top: calc(50% - 50%);
  top: var(--mdc-ripple-top, calc(50% - 50%));
  left: calc(50% - 50%);
  left: var(--mdc-ripple-left, calc(50% - 50%));
  width: 100%;
  width: var(--mdc-ripple-fg-size, 100%);
  height: 100%;
  height: var(--mdc-ripple-fg-size, 100%);
  transform: scale(0);
  transform: scale(var(--mdc-ripple-fg-scale, 0)); }

.mdc-button--theme-dark::after,
.mdc-theme--dark .mdc-button::after {
  background-color: rgba(255, 255, 255, 0.14);
  position: absolute;
  top: calc(50% - 100%);
  left: calc(50% - 100%);
  width: 200%;
  height: 200%;
  transition: opacity 250ms linear;
  border-radius: 50%;
  opacity: 0;
  pointer-events: none;
  content: ""; }

.mdc-button--theme-dark.mdc-ripple-upgraded::after,
.mdc-theme--dark .mdc-button.mdc-ripple-upgraded::after {
  top: 0;
  left: 0;
  width: 100%;
  width: var(--mdc-ripple-fg-size, 100%);
  height: 100%;
  height: var(--mdc-ripple-fg-size, 100%);
  transform: scale(0);
  transform-origin: center center;
  opacity: 0; }

.mdc-button--theme-dark:not(.mdc-ripple-upgraded--unbounded)::after,
.mdc-theme--dark .mdc-button:not(.mdc-ripple-upgraded--unbounded)::after {
  transform-origin: center center; }

.mdc-button--theme-dark.mdc-ripple-upgraded--unbounded::after,
.mdc-theme--dark .mdc-button.mdc-ripple-upgraded--unbounded::after {
  top: 0;
  top: var(--mdc-ripple-top, 0);
  left: 0;
  left: var(--mdc-ripple-left, 0);
  width: 100%;
  width: var(--mdc-ripple-fg-size, 100%);
  height: 100%;
  height: var(--mdc-ripple-fg-size, 100%);
  transform: scale(0);
  transform-origin: center center; }

.mdc-button--theme-dark.mdc-ripple-upgraded--foreground-activation::after,
.mdc-theme--dark .mdc-button.mdc-ripple-upgraded--foreground-activation::after {
  animation: 300ms mdc-ripple-fg-radius-in forwards, 83ms mdc-ripple-fg-opacity-in forwards; }

.mdc-button--theme-dark.mdc-ripple-upgraded--foreground-deactivation::after,
.mdc-theme--dark .mdc-button.mdc-ripple-upgraded--foreground-deactivation::after {
  transform: translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1));
  animation: 83ms mdc-ripple-fg-opacity-out; }

.mdc-button--theme-dark:not(.mdc-ripple-upgraded),
.mdc-theme--dark .mdc-button:not(.mdc-ripple-upgraded) {
  -webkit-tap-highlight-color: rgba(255, 255, 255, 0.18); }

.mdc-button.mdc-button--primary {
  --mdc-ripple-surface-width: 0;
  --mdc-ripple-surface-height: 0;
  --mdc-ripple-fg-size: 0;
  --mdc-ripple-left: 0;
  --mdc-ripple-top: 0;
  --mdc-ripple-fg-scale: 1;
  --mdc-ripple-fg-translate-end: 0;
  --mdc-ripple-fg-translate-start: 0;
  will-change: transform, opacity;
  -webkit-tap-highlight-color: transparent; }

.mdc-button.mdc-button--primary:not(.mdc-ripple-upgraded):hover::before, .mdc-button.mdc-button--primary:not(.mdc-ripple-upgraded):focus::before, .mdc-button.mdc-button--primary:not(.mdc-ripple-upgraded):active::after {
  transition-duration: 85ms;
  opacity: .6; }

.mdc-button.mdc-button--primary::before {
  background-color: rgba(7, 105, 105, 0.12);
  position: absolute;
  top: calc(50% - 100%);
  left: calc(50% - 100%);
  width: 200%;
  height: 200%;
  transition: opacity 250ms linear;
  border-radius: 50%;
  opacity: 0;
  pointer-events: none;
  content: ""; }

@supports (background-color: color(green a(10%))) {
  .mdc-button.mdc-button--primary::before {
    background-color: color(var(--mdc-theme-primary, #076969) a(12%)); } }

.mdc-button.mdc-button--primary.mdc-ripple-upgraded::before {
  top: calc(50% - 100%);
  left: calc(50% - 100%);
  width: 200%;
  height: 200%;
  transform: scale(0);
  transform: scale(var(--mdc-ripple-fg-scale, 0)); }

.mdc-button.mdc-button--primary.mdc-ripple-upgraded--background-focused::before {
  opacity: .99999; }

.mdc-button.mdc-button--primary.mdc-ripple-upgraded--background-active-fill::before {
  transition-duration: 120ms;
  opacity: 1; }

.mdc-button.mdc-button--primary.mdc-ripple-upgraded--unbounded::before {
  top: calc(50% - 50%);
  top: var(--mdc-ripple-top, calc(50% - 50%));
  left: calc(50% - 50%);
  left: var(--mdc-ripple-left, calc(50% - 50%));
  width: 100%;
  width: var(--mdc-ripple-fg-size, 100%);
  height: 100%;
  height: var(--mdc-ripple-fg-size, 100%);
  transform: scale(0);
  transform: scale(var(--mdc-ripple-fg-scale, 0)); }

.mdc-button.mdc-button--primary::after {
  background-color: rgba(7, 105, 105, 0.12);
  position: absolute;
  top: calc(50% - 100%);
  left: calc(50% - 100%);
  width: 200%;
  height: 200%;
  transition: opacity 250ms linear;
  border-radius: 50%;
  opacity: 0;
  pointer-events: none;
  content: ""; }

@supports (background-color: color(green a(10%))) {
  .mdc-button.mdc-button--primary::after {
    background-color: color(var(--mdc-theme-primary, #076969) a(12%)); } }

.mdc-button.mdc-button--primary.mdc-ripple-upgraded::after {
  top: 0;
  left: 0;
  width: 100%;
  width: var(--mdc-ripple-fg-size, 100%);
  height: 100%;
  height: var(--mdc-ripple-fg-size, 100%);
  transform: scale(0);
  transform-origin: center center;
  opacity: 0; }

.mdc-button.mdc-button--primary:not(.mdc-ripple-upgraded--unbounded)::after {
  transform-origin: center center; }

.mdc-button.mdc-button--primary.mdc-ripple-upgraded--unbounded::after {
  top: 0;
  top: var(--mdc-ripple-top, 0);
  left: 0;
  left: var(--mdc-ripple-left, 0);
  width: 100%;
  width: var(--mdc-ripple-fg-size, 100%);
  height: 100%;
  height: var(--mdc-ripple-fg-size, 100%);
  transform: scale(0);
  transform-origin: center center; }

.mdc-button.mdc-button--primary.mdc-ripple-upgraded--foreground-activation::after {
  animation: 300ms mdc-ripple-fg-radius-in forwards, 83ms mdc-ripple-fg-opacity-in forwards; }

.mdc-button.mdc-button--primary.mdc-ripple-upgraded--foreground-deactivation::after {
  transform: translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1));
  animation: 83ms mdc-ripple-fg-opacity-out; }

.mdc-button.mdc-button--accent {
  --mdc-ripple-surface-width: 0;
  --mdc-ripple-surface-height: 0;
  --mdc-ripple-fg-size: 0;
  --mdc-ripple-left: 0;
  --mdc-ripple-top: 0;
  --mdc-ripple-fg-scale: 1;
  --mdc-ripple-fg-translate-end: 0;
  --mdc-ripple-fg-translate-start: 0;
  will-change: transform, opacity;
  -webkit-tap-highlight-color: transparent; }

.mdc-button.mdc-button--accent:not(.mdc-ripple-upgraded):hover::before, .mdc-button.mdc-button--accent:not(.mdc-ripple-upgraded):focus::before, .mdc-button.mdc-button--accent:not(.mdc-ripple-upgraded):active::after {
  transition-duration: 85ms;
  opacity: .6; }

.mdc-button.mdc-button--accent::before {
  background-color: rgba(175, 121, 12, 0.12);
  position: absolute;
  top: calc(50% - 100%);
  left: calc(50% - 100%);
  width: 200%;
  height: 200%;
  transition: opacity 250ms linear;
  border-radius: 50%;
  opacity: 0;
  pointer-events: none;
  content: ""; }

@supports (background-color: color(green a(10%))) {
  .mdc-button.mdc-button--accent::before {
    background-color: color(var(--mdc-theme-accent, #af790c) a(12%)); } }

.mdc-button.mdc-button--accent.mdc-ripple-upgraded::before {
  top: calc(50% - 100%);
  left: calc(50% - 100%);
  width: 200%;
  height: 200%;
  transform: scale(0);
  transform: scale(var(--mdc-ripple-fg-scale, 0)); }

.mdc-button.mdc-button--accent.mdc-ripple-upgraded--background-focused::before {
  opacity: .99999; }

.mdc-button.mdc-button--accent.mdc-ripple-upgraded--background-active-fill::before {
  transition-duration: 120ms;
  opacity: 1; }

.mdc-button.mdc-button--accent.mdc-ripple-upgraded--unbounded::before {
  top: calc(50% - 50%);
  top: var(--mdc-ripple-top, calc(50% - 50%));
  left: calc(50% - 50%);
  left: var(--mdc-ripple-left, calc(50% - 50%));
  width: 100%;
  width: var(--mdc-ripple-fg-size, 100%);
  height: 100%;
  height: var(--mdc-ripple-fg-size, 100%);
  transform: scale(0);
  transform: scale(var(--mdc-ripple-fg-scale, 0)); }

.mdc-button.mdc-button--accent::after {
  background-color: rgba(175, 121, 12, 0.12);
  position: absolute;
  top: calc(50% - 100%);
  left: calc(50% - 100%);
  width: 200%;
  height: 200%;
  transition: opacity 250ms linear;
  border-radius: 50%;
  opacity: 0;
  pointer-events: none;
  content: ""; }

@supports (background-color: color(green a(10%))) {
  .mdc-button.mdc-button--accent::after {
    background-color: color(var(--mdc-theme-accent, #af790c) a(12%)); } }

.mdc-button.mdc-button--accent.mdc-ripple-upgraded::after {
  top: 0;
  left: 0;
  width: 100%;
  width: var(--mdc-ripple-fg-size, 100%);
  height: 100%;
  height: var(--mdc-ripple-fg-size, 100%);
  transform: scale(0);
  transform-origin: center center;
  opacity: 0; }

.mdc-button.mdc-button--accent:not(.mdc-ripple-upgraded--unbounded)::after {
  transform-origin: center center; }

.mdc-button.mdc-button--accent.mdc-ripple-upgraded--unbounded::after {
  top: 0;
  top: var(--mdc-ripple-top, 0);
  left: 0;
  left: var(--mdc-ripple-left, 0);
  width: 100%;
  width: var(--mdc-ripple-fg-size, 100%);
  height: 100%;
  height: var(--mdc-ripple-fg-size, 100%);
  transform: scale(0);
  transform-origin: center center; }

.mdc-button.mdc-button--accent.mdc-ripple-upgraded--foreground-activation::after {
  animation: 300ms mdc-ripple-fg-radius-in forwards, 83ms mdc-ripple-fg-opacity-in forwards; }

.mdc-button.mdc-button--accent.mdc-ripple-upgraded--foreground-deactivation::after {
  transform: translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1));
  animation: 83ms mdc-ripple-fg-opacity-out; }

.mdc-button:active {
  outline: none; }

.mdc-button:hover {
  cursor: pointer; }

.mdc-button::-moz-focus-inner {
  padding: 0;
  border: 0; }

.mdc-button--dense {
  height: 32px;
  font-size: .8125rem;
  line-height: 32px; }

.mdc-button--raised {
  box-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12);
  transition: box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);
  will-change: box-shadow;
  min-width: 88px; }

.mdc-button--raised:active {
  box-shadow: 0px 5px 5px -3px rgba(0, 0, 0, 0.2), 0px 8px 10px 1px rgba(0, 0, 0, 0.14), 0px 3px 14px 2px rgba(0, 0, 0, 0.12); }

.mdc-button--raised.mdc-button--primary {
  --mdc-ripple-surface-width: 0;
  --mdc-ripple-surface-height: 0;
  --mdc-ripple-fg-size: 0;
  --mdc-ripple-left: 0;
  --mdc-ripple-top: 0;
  --mdc-ripple-fg-scale: 1;
  --mdc-ripple-fg-translate-end: 0;
  --mdc-ripple-fg-translate-start: 0;
  will-change: transform, opacity;
  -webkit-tap-highlight-color: transparent; }

.mdc-button--raised.mdc-button--primary:not(.mdc-ripple-upgraded):hover::before, .mdc-button--raised.mdc-button--primary:not(.mdc-ripple-upgraded):focus::before, .mdc-button--raised.mdc-button--primary:not(.mdc-ripple-upgraded):active::after {
  transition-duration: 85ms;
  opacity: .6; }

.mdc-button--raised.mdc-button--primary::before {
  background-color: rgba(255, 255, 255, 0.14);
  position: absolute;
  top: calc(50% - 100%);
  left: calc(50% - 100%);
  width: 200%;
  height: 200%;
  transition: opacity 250ms linear;
  border-radius: 50%;
  opacity: 0;
  pointer-events: none;
  content: ""; }

.mdc-button--raised.mdc-button--primary.mdc-ripple-upgraded::before {
  top: calc(50% - 100%);
  left: calc(50% - 100%);
  width: 200%;
  height: 200%;
  transform: scale(0);
  transform: scale(var(--mdc-ripple-fg-scale, 0)); }

.mdc-button--raised.mdc-button--primary.mdc-ripple-upgraded--background-focused::before {
  opacity: .99999; }

.mdc-button--raised.mdc-button--primary.mdc-ripple-upgraded--background-active-fill::before {
  transition-duration: 120ms;
  opacity: 1; }

.mdc-button--raised.mdc-button--primary.mdc-ripple-upgraded--unbounded::before {
  top: calc(50% - 50%);
  top: var(--mdc-ripple-top, calc(50% - 50%));
  left: calc(50% - 50%);
  left: var(--mdc-ripple-left, calc(50% - 50%));
  width: 100%;
  width: var(--mdc-ripple-fg-size, 100%);
  height: 100%;
  height: var(--mdc-ripple-fg-size, 100%);
  transform: scale(0);
  transform: scale(var(--mdc-ripple-fg-scale, 0)); }

.mdc-button--raised.mdc-button--primary::after {
  background-color: rgba(255, 255, 255, 0.14);
  position: absolute;
  top: calc(50% - 100%);
  left: calc(50% - 100%);
  width: 200%;
  height: 200%;
  transition: opacity 250ms linear;
  border-radius: 50%;
  opacity: 0;
  pointer-events: none;
  content: ""; }

.mdc-button--raised.mdc-button--primary.mdc-ripple-upgraded::after {
  top: 0;
  left: 0;
  width: 100%;
  width: var(--mdc-ripple-fg-size, 100%);
  height: 100%;
  height: var(--mdc-ripple-fg-size, 100%);
  transform: scale(0);
  transform-origin: center center;
  opacity: 0; }

.mdc-button--raised.mdc-button--primary:not(.mdc-ripple-upgraded--unbounded)::after {
  transform-origin: center center; }

.mdc-button--raised.mdc-button--primary.mdc-ripple-upgraded--unbounded::after {
  top: 0;
  top: var(--mdc-ripple-top, 0);
  left: 0;
  left: var(--mdc-ripple-left, 0);
  width: 100%;
  width: var(--mdc-ripple-fg-size, 100%);
  height: 100%;
  height: var(--mdc-ripple-fg-size, 100%);
  transform: scale(0);
  transform-origin: center center; }

.mdc-button--raised.mdc-button--primary.mdc-ripple-upgraded--foreground-activation::after {
  animation: 300ms mdc-ripple-fg-radius-in forwards, 83ms mdc-ripple-fg-opacity-in forwards; }

.mdc-button--raised.mdc-button--primary.mdc-ripple-upgraded--foreground-deactivation::after {
  transform: translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1));
  animation: 83ms mdc-ripple-fg-opacity-out; }

.mdc-button--raised.mdc-button--accent {
  --mdc-ripple-surface-width: 0;
  --mdc-ripple-surface-height: 0;
  --mdc-ripple-fg-size: 0;
  --mdc-ripple-left: 0;
  --mdc-ripple-top: 0;
  --mdc-ripple-fg-scale: 1;
  --mdc-ripple-fg-translate-end: 0;
  --mdc-ripple-fg-translate-start: 0;
  will-change: transform, opacity;
  -webkit-tap-highlight-color: transparent; }

.mdc-button--raised.mdc-button--accent:not(.mdc-ripple-upgraded):hover::before, .mdc-button--raised.mdc-button--accent:not(.mdc-ripple-upgraded):focus::before, .mdc-button--raised.mdc-button--accent:not(.mdc-ripple-upgraded):active::after {
  transition-duration: 85ms;
  opacity: .6; }

.mdc-button--raised.mdc-button--accent::before {
  background-color: rgba(255, 255, 255, 0.14);
  position: absolute;
  top: calc(50% - 100%);
  left: calc(50% - 100%);
  width: 200%;
  height: 200%;
  transition: opacity 250ms linear;
  border-radius: 50%;
  opacity: 0;
  pointer-events: none;
  content: ""; }

.mdc-button--raised.mdc-button--accent.mdc-ripple-upgraded::before {
  top: calc(50% - 100%);
  left: calc(50% - 100%);
  width: 200%;
  height: 200%;
  transform: scale(0);
  transform: scale(var(--mdc-ripple-fg-scale, 0)); }

.mdc-button--raised.mdc-button--accent.mdc-ripple-upgraded--background-focused::before {
  opacity: .99999; }

.mdc-button--raised.mdc-button--accent.mdc-ripple-upgraded--background-active-fill::before {
  transition-duration: 120ms;
  opacity: 1; }

.mdc-button--raised.mdc-button--accent.mdc-ripple-upgraded--unbounded::before {
  top: calc(50% - 50%);
  top: var(--mdc-ripple-top, calc(50% - 50%));
  left: calc(50% - 50%);
  left: var(--mdc-ripple-left, calc(50% - 50%));
  width: 100%;
  width: var(--mdc-ripple-fg-size, 100%);
  height: 100%;
  height: var(--mdc-ripple-fg-size, 100%);
  transform: scale(0);
  transform: scale(var(--mdc-ripple-fg-scale, 0)); }

.mdc-button--raised.mdc-button--accent::after {
  background-color: rgba(255, 255, 255, 0.14);
  position: absolute;
  top: calc(50% - 100%);
  left: calc(50% - 100%);
  width: 200%;
  height: 200%;
  transition: opacity 250ms linear;
  border-radius: 50%;
  opacity: 0;
  pointer-events: none;
  content: ""; }

.mdc-button--raised.mdc-button--accent.mdc-ripple-upgraded::after {
  top: 0;
  left: 0;
  width: 100%;
  width: var(--mdc-ripple-fg-size, 100%);
  height: 100%;
  height: var(--mdc-ripple-fg-size, 100%);
  transform: scale(0);
  transform-origin: center center;
  opacity: 0; }

.mdc-button--raised.mdc-button--accent:not(.mdc-ripple-upgraded--unbounded)::after {
  transform-origin: center center; }

.mdc-button--raised.mdc-button--accent.mdc-ripple-upgraded--unbounded::after {
  top: 0;
  top: var(--mdc-ripple-top, 0);
  left: 0;
  left: var(--mdc-ripple-left, 0);
  width: 100%;
  width: var(--mdc-ripple-fg-size, 100%);
  height: 100%;
  height: var(--mdc-ripple-fg-size, 100%);
  transform: scale(0);
  transform-origin: center center; }

.mdc-button--raised.mdc-button--accent.mdc-ripple-upgraded--foreground-activation::after {
  animation: 300ms mdc-ripple-fg-radius-in forwards, 83ms mdc-ripple-fg-opacity-in forwards; }

.mdc-button--raised.mdc-button--accent.mdc-ripple-upgraded--foreground-deactivation::after {
  transform: translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1));
  animation: 83ms mdc-ripple-fg-opacity-out; }

.mdc-button--theme-dark .mdc-button--raised,
.mdc-theme--dark .mdc-button--raised {
  background-color: #076969;
  background-color: var(--mdc-theme-primary, #076969);
  color: white;
  color: var(--mdc-theme-text-primary-on-primary, white); }

.mdc-button--theme-dark .mdc-button--raised::before,
.mdc-theme--dark .mdc-button--raised::before {
  color: black; }

.mdc-button--primary {
  color: #076969;
  color: var(--mdc-theme-primary, #076969); }

.mdc-button--theme-dark .mdc-button--primary,
.mdc-theme--dark .mdc-button--primary {
  color: #076969;
  color: var(--mdc-theme-primary, #076969); }

.mdc-button--primary.mdc-button--raised {
  background-color: #076969;
  background-color: var(--mdc-theme-primary, #076969);
  color: white;
  color: var(--mdc-theme-text-primary-on-primary, white); }

.mdc-button--primary.mdc-button--raised::before {
  color: black; }

.mdc-button--accent {
  color: #af790c;
  color: var(--mdc-theme-accent, #af790c); }

.mdc-button--theme-dark .mdc-button--accent,
.mdc-theme--dark .mdc-button--accent {
  color: #af790c;
  color: var(--mdc-theme-accent, #af790c); }

.mdc-button--accent.mdc-button--raised {
  background-color: #af790c;
  background-color: var(--mdc-theme-accent, #af790c);
  color: white;
  color: var(--mdc-theme-text-primary-on-accent, white); }

.mdc-button--accent.mdc-button--raised::before {
  color: black; }

.mdc-button--compact {
  padding: 0 8px; }

fieldset:disabled .mdc-button, .mdc-button:disabled {
  color: rgba(0, 0, 0, 0.26);
  cursor: default;
  pointer-events: none; }

.mdc-button--theme-dark fieldset:disabled .mdc-button,
.mdc-theme--dark fieldset:disabled .mdc-button, .mdc-button--theme-dark .mdc-button:disabled,
.mdc-theme--dark .mdc-button:disabled {
  color: rgba(255, 255, 255, 0.3); }

fieldset:disabled .mdc-button--raised, .mdc-button--raised:disabled {
  box-shadow: 0px 0px 0px 0px rgba(0, 0, 0, 0.2), 0px 0px 0px 0px rgba(0, 0, 0, 0.14), 0px 0px 0px 0px rgba(0, 0, 0, 0.12);
  background-color: rgba(0, 0, 0, 0.12);
  pointer-events: none; }

.mdc-button--theme-dark fieldset:disabled .mdc-button--raised,
.mdc-theme--dark fieldset:disabled .mdc-button--raised, .mdc-button--theme-dark .mdc-button--raised:disabled,
.mdc-theme--dark .mdc-button--raised:disabled {
  background-color: rgba(255, 255, 255, 0.12); }

/**
 * The css property used for elevation. In most cases this should not be changed. It is exposed
 * as a variable for abstraction / easy use when needing to reference the property directly, for
 * example in a `will-change` rule.
 */
/**
 * The default duration value for elevation transitions.
 */
/**
 * The default easing value for elevation transitions.
 */
/**
 * Applies the correct css rules to an element to give it the elevation specified by $z-value.
 * The $z-value must be between 0 and 24.
 */
/**
 * Returns a string that can be used as the value for a `transition` property for elevation.
 * Calling this function directly is useful in situations where a component needs to transition
 * more than one property.
 *
 * ```scss
 * .foo {
 *   transition: mdc-elevation-transition-rule(), opacity 100ms ease;
 *   will-change: $mdc-elevation-property, opacity;
 * }
 * ```
 */
/**
 * Applies the correct css rules needed to have an element transition between elevations.
 * This mixin should be applied to elements whose elevation values will change depending on their
 * context (e.g. when active or disabled).
 */
/**
 * Creates a rule that will be applied when an MDC-Web component is within the context of an RTL layout.
 *
 * Usage Example:
 * ```scss
 * .mdc-foo {
 *   position: absolute;
 *   left: 0;
 *
 *   @include mdc-rtl {
 *     left: auto;
 *     right: 0;
 *   }
 *
 *   &__bar {
 *     margin-left: 4px;
 *     @include mdc-rtl(".mdc-foo") {
 *       margin-left: auto;
 *       margin-right: 4px;
 *     }
 *   }
 * }
 *
 * .mdc-foo--mod {
 *   padding-left: 4px;
 *
 *   @include mdc-rtl {
 *     padding-left: auto;
 *     padding-right: 4px;
 *   }
 * }
 * ```
 *
 * Note that this works by checking for [dir="rtl"] on an ancestor element. While this will work
 * in most cases, it will in some cases lead to false negatives, e.g.
 *
 * ```html
 * <html dir="rtl">
 *   <!-- ... -->
 *   <div dir="ltr">
 *     <div class="mdc-foo">Styled incorrectly as RTL!</div>
 *   </div>
 * </html>
 * ```
 *
 * In the future, selectors such as :dir (http://mdn.io/:dir) will help us mitigate this.
 */
/**
 * Takes a base box-model property - e.g. margin / border / padding - along with a default
 * direction and value, and emits rules which apply the value to the
 * "<base-property>-<default-direction>" property by default, but flips the direction
 * when within an RTL context.
 *
 * For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-box(margin, left, 8px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-left: 8px;
 *
 *   @include mdc-rtl {
 *     margin-right: 8px;
 *     margin-left: 0;
 *   }
 * }
 * ```
 * whereas:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-box(margin, right, 8px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-right: 8px;
 *
 *   @include mdc-rtl {
 *     margin-right: 0;
 *     margin-left: 8px;
 *   }
 * }
 * ```
 *
 * You can also pass a 4th optional $root-selector argument which will be forwarded to `mdc-rtl`,
 * e.g. `@include mdc-rtl-reflexive-box-property(margin, left, 8px, ".mdc-component")`.
 *
 * Note that this function will always zero out the original value in an RTL context. If you're
 * trying to flip the values, use mdc-rtl-reflexive-property().
 */
/**
 * Takes a base property and emits rules that assign <base-property>-left to <left-value> and
 * <base-property>-right to <right-value> in a LTR context, and vice versa in a RTL context.
 * For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-property(margin, auto, 12px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-left: auto;
 *   margin-right: 12px;
 *
 *   @include mdc-rtl {
 *     margin-left: 12px;
 *     margin-right: auto;
 *   }
 * }
 * ```
 *
 * A 4th optional $root-selector argument can be given, which will be passed to `mdc-rtl`.
 */
/**
 * Takes an argument specifying a horizontal position property (either "left" or "right") as well
 * as a value, and applies that value to the specified position in a LTR context, and flips it in a
 * RTL context. For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-position(left, 0);
 *   position: absolute;
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 *  .mdc-foo {
 *    position: absolute;
 *    left: 0;
 *    right: initial;
 *
 *    @include mdc-rtl {
 *      right: 0;
 *      left: initial;
 *    }
 *  }
 * ```
 * An optional third $root-selector argument may also be given, which is passed to `mdc-rtl`.
 */
/*
  Precomputed linear color channel values, for use in contrast calculations.
  See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests

  Algorithm, for c in 0 to 255:
  f(c) {
    c = c / 255;
    return c < 0.03928 ? c / 12.92 : Math.pow((c + 0.055) / 1.055, 2.4);
  }

  This lookup table is needed since there is no `pow` in SASS.
*/
/**
 * Calculate the luminance for a color.
 * See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
 */
/**
 * Calculate the contrast ratio between two colors.
 * See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
 */
/**
 * Determine whether to use dark or light text on top of given color.
 * Returns "dark" for dark text and "light" for light text.
 */
/*
  Main theme colors.
  If you're a user customizing your color scheme in SASS, these are probably the only variables you need to change.
*/
/* Indigo 500 */
/* Pink A200 */
/* White */
/* Which set of text colors to use for each main theme color (light or dark) */
/* Text colors according to light vs dark and text type */
/* Primary text colors for each of the theme colors */
/**
 * Applies the correct theme color style to the specified property.
 * $property is typically color or background-color, but can be any CSS property that accepts color values.
 * $style should be one of the map keys in $mdc-theme-property-values (_variables.scss).
 */
/**
 * Creates a rule to be used in MDC-Web components for dark theming, and applies the provided contents.
 * Should provide the $root-selector option if applied to anything other than the root selector.
 * When used with a modifier class, provide a second argument of `true` for the $compound parameter
 * to specify that this should be attached as a compound class.
 *
 * Usage example:
 *
 * ```scss
 * .mdc-foo {
 *   color: black;
 *
 *   @include mdc-theme-dark {
 *     color: white;
 *   }
 *
 *   &__bar {
 *     background: black;
 *
 *     @include mdc-theme-dark(".mdc-foo") {
 *       background: white;
 *     }
 *   }
 * }
 *
 * .mdc-foo--disabled {
 *   opacity: .38;
 *
 *   @include mdc-theme-dark(".mdc-foo", true) {
 *     opacity: .5;
 *   }
 * }
 * ```
 */
/*
  Precomputed linear color channel values, for use in contrast calculations.
  See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests

  Algorithm, for c in 0 to 255:
  f(c) {
    c = c / 255;
    return c < 0.03928 ? c / 12.92 : Math.pow((c + 0.055) / 1.055, 2.4);
  }

  This lookup table is needed since there is no `pow` in SASS.
*/
/**
 * Calculate the luminance for a color.
 * See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
 */
/**
 * Calculate the contrast ratio between two colors.
 * See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
 */
/**
 * Determine whether to use dark or light text on top of given color.
 * Returns "dark" for dark text and "light" for light text.
 */
/*
  Main theme colors.
  If you're a user customizing your color scheme in SASS, these are probably the only variables you need to change.
*/
/* Indigo 500 */
/* Pink A200 */
/* White */
/* Which set of text colors to use for each main theme color (light or dark) */
/* Text colors according to light vs dark and text type */
/* Primary text colors for each of the theme colors */
/**
 * Applies the correct theme color style to the specified property.
 * $property is typically color or background-color, but can be any CSS property that accepts color values.
 * $style should be one of the map keys in $mdc-theme-property-values (_variables.scss).
 */
/**
 * Creates a rule to be used in MDC-Web components for dark theming, and applies the provided contents.
 * Should provide the $root-selector option if applied to anything other than the root selector.
 * When used with a modifier class, provide a second argument of `true` for the $compound parameter
 * to specify that this should be attached as a compound class.
 *
 * Usage example:
 *
 * ```scss
 * .mdc-foo {
 *   color: black;
 *
 *   @include mdc-theme-dark {
 *     color: white;
 *   }
 *
 *   &__bar {
 *     background: black;
 *
 *     @include mdc-theme-dark(".mdc-foo") {
 *       background: white;
 *     }
 *   }
 * }
 *
 * .mdc-foo--disabled {
 *   opacity: .38;
 *
 *   @include mdc-theme-dark(".mdc-foo", true) {
 *     opacity: .5;
 *   }
 * }
 * ```
 */
/* TODO(sgomes): Figure out what to do about desktop font sizes. */
/* TODO(sgomes): Figure out what to do about i18n and i18n font sizes. */
/**
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Creates a rule that will be applied when an MDC-Web component is within the context of an RTL layout.
 *
 * Usage Example:
 * ```scss
 * .mdc-foo {
 *   position: absolute;
 *   left: 0;
 *
 *   @include mdc-rtl {
 *     left: auto;
 *     right: 0;
 *   }
 *
 *   &__bar {
 *     margin-left: 4px;
 *     @include mdc-rtl(".mdc-foo") {
 *       margin-left: auto;
 *       margin-right: 4px;
 *     }
 *   }
 * }
 *
 * .mdc-foo--mod {
 *   padding-left: 4px;
 *
 *   @include mdc-rtl {
 *     padding-left: auto;
 *     padding-right: 4px;
 *   }
 * }
 * ```
 *
 * Note that this works by checking for [dir="rtl"] on an ancestor element. While this will work
 * in most cases, it will in some cases lead to false negatives, e.g.
 *
 * ```html
 * <html dir="rtl">
 *   <!-- ... -->
 *   <div dir="ltr">
 *     <div class="mdc-foo">Styled incorrectly as RTL!</div>
 *   </div>
 * </html>
 * ```
 *
 * In the future, selectors such as :dir (http://mdn.io/:dir) will help us mitigate this.
 */
/**
 * Takes a base box-model property - e.g. margin / border / padding - along with a default
 * direction and value, and emits rules which apply the value to the
 * "<base-property>-<default-direction>" property by default, but flips the direction
 * when within an RTL context.
 *
 * For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-box(margin, left, 8px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-left: 8px;
 *
 *   @include mdc-rtl {
 *     margin-right: 8px;
 *     margin-left: 0;
 *   }
 * }
 * ```
 * whereas:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-box(margin, right, 8px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-right: 8px;
 *
 *   @include mdc-rtl {
 *     margin-right: 0;
 *     margin-left: 8px;
 *   }
 * }
 * ```
 *
 * You can also pass a 4th optional $root-selector argument which will be forwarded to `mdc-rtl`,
 * e.g. `@include mdc-rtl-reflexive-box-property(margin, left, 8px, ".mdc-component")`.
 *
 * Note that this function will always zero out the original value in an RTL context. If you're
 * trying to flip the values, use mdc-rtl-reflexive-property().
 */
/**
 * Takes a base property and emits rules that assign <base-property>-left to <left-value> and
 * <base-property>-right to <right-value> in a LTR context, and vice versa in a RTL context.
 * For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-property(margin, auto, 12px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-left: auto;
 *   margin-right: 12px;
 *
 *   @include mdc-rtl {
 *     margin-left: 12px;
 *     margin-right: auto;
 *   }
 * }
 * ```
 *
 * A 4th optional $root-selector argument can be given, which will be passed to `mdc-rtl`.
 */
/**
 * Takes an argument specifying a horizontal position property (either "left" or "right") as well
 * as a value, and applies that value to the specified position in a LTR context, and flips it in a
 * RTL context. For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-position(left, 0);
 *   position: absolute;
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 *  .mdc-foo {
 *    position: absolute;
 *    left: 0;
 *    right: initial;
 *
 *    @include mdc-rtl {
 *      right: 0;
 *      left: initial;
 *    }
 *  }
 * ```
 * An optional third $root-selector argument may also be given, which is passed to `mdc-rtl`.
 */
/**
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
.mdc-temporary-drawer {
  /* Use aspect ratio trick to maintain 16:9 aspect ratio on the header */
  /* stylelint-disable selector-no-qualifying-type */
  /* stylelint-enable selector-no-qualifying-type */
  /* TODO(sgomes): Revisit when we have interactive lists. */
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  overflow: hidden;
  pointer-events: none;
  box-sizing: border-box;
  contain: strict;
  z-index: 3;
  /* Shaded background */ }

.mdc-temporary-drawer__toolbar-spacer {
  display: flex;
  position: relative;
  flex-direction: row;
  flex-shrink: 0;
  align-items: flex-center;
  height: 56px;
  padding: 16px;
  border-bottom: 1px solid rgba(0, 0, 0, 0.12);
  box-sizing: border-box;
  /* TODO(sgomes): replace with global breakpoints when we have them */ }

.mdc-temporary-drawer__toolbar-spacer--theme-dark .mdc-temporary-drawer__toolbar-spacer,
.mdc-theme--dark .mdc-temporary-drawer__toolbar-spacer {
  border-bottom: 1px solid rgba(255, 255, 255, 0.12); }

@media (min-width: 600px) {
  .mdc-temporary-drawer__toolbar-spacer {
    height: 64px; } }

.mdc-temporary-drawer__header {
  position: relative; }

.mdc-temporary-drawer__header::before {
  display: block;
  padding-top: 56.25%;
  content: ""; }

.mdc-temporary-drawer__header-content {
  display: flex;
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  align-items: flex-end;
  padding: 16px;
  box-sizing: border-box; }

.mdc-temporary-drawer .mdc-list-group,
.mdc-temporary-drawer .mdc-list {
  padding-right: 0;
  padding-left: 0; }

.mdc-temporary-drawer .mdc-list-item {
  position: relative;
  padding: 0 16px;
  outline: none;
  color: inherit;
  text-decoration: none;
  font-family: Roboto, sans-serif;
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  font-size: 0.875rem;
  font-weight: 500;
  letter-spacing: 0.04em;
  line-height: 1.5rem; }

.mdc-temporary-drawer .mdc-list-item.mdc-ripple-upgraded {
  left: 0; }

.mdc-temporary-drawer .mdc-list-item__start-detail {
  color: rgba(0, 0, 0, 0.54); }

.mdc-temporary-drawer .mdc-list-item__start-detail--theme-dark .mdc-temporary-drawer .mdc-list-item__start-detail,
.mdc-theme--dark .mdc-temporary-drawer .mdc-list-item__start-detail {
  color: rgba(255, 255, 255, 0.54); }

.mdc-temporary-drawer--selected.mdc-list-item,
.mdc-temporary-drawer--selected.mdc-list-item .mdc-list-item__start-detail {
  color: #076969;
  color: var(--mdc-theme-primary, #076969); }

.mdc-temporary-drawer .mdc-list-item::before {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  transition: opacity 120ms 0ms cubic-bezier(0.4, 0, 1, 1);
  border-radius: inherit;
  background: currentColor;
  content: "";
  opacity: 0; }

.mdc-temporary-drawer .mdc-list-item:focus::before {
  transition: opacity 180ms 0ms cubic-bezier(0, 0, 0.2, 1);
  opacity: .12; }

.mdc-temporary-drawer .mdc-list-item:active::before {
  /*
      Slightly darker value for visual distinction.
      This allows a full base that has distinct modes.
      Progressive enhancement with ripples will provide complete button spec alignment.
    */
  transition: opacity 180ms 0ms cubic-bezier(0, 0, 0.2, 1);
  opacity: .18; }

.mdc-temporary-drawer .mdc-list-item:active:focus::before {
  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1); }

.mdc-temporary-drawer::before {
  display: block;
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.6);
  content: "";
  opacity: 0;
  opacity: var(--mdc-temporary-drawer-opacity, 0);
  will-change: opacity;
  box-sizing: border-box; }

.mdc-temporary-drawer__drawer {
  background: #fff;
  background: var(--mdc-theme-background, #fff);
  box-shadow: 0px 8px 10px -5px rgba(0, 0, 0, 0.2), 0px 16px 24px 2px rgba(0, 0, 0, 0.14), 0px 6px 30px 5px rgba(0, 0, 0, 0.12);
  left: 0;
  right: initial;
  height: 100%;
  transform: translateX(-107%);
  transform: translateX(calc(-100% - 20px));
  will-change: transform;
  display: flex;
  position: absolute;
  flex-direction: column;
  width: calc(100% - 56px);
  max-width: 280px;
  box-sizing: border-box;
  overflow: hidden;
  touch-action: none;
  /* TODO(sgomes): replace with global breakpoints when we have them */ }

[dir="rtl"] .mdc-temporary-drawer__drawer, .mdc-temporary-drawer__drawer[dir="rtl"] {
  left: initial;
  right: 0; }

.mdc-temporary-drawer--theme-dark .mdc-temporary-drawer__drawer,
.mdc-theme--dark .mdc-temporary-drawer__drawer {
  background: #303030;
  color: white;
  color: var(--mdc-theme-text-primary-on-dark, white); }

[dir="rtl"] .mdc-temporary-drawer .mdc-temporary-drawer__drawer,
.mdc-temporary-drawer[dir="rtl"] .mdc-temporary-drawer__drawer {
  transform: translateX(107%);
  transform: translateX(calc(100% + 20px)); }

@media (min-width: 600px) {
  .mdc-temporary-drawer__drawer {
    width: calc(100% - 64px);
    max-width: 320px; } }

.mdc-temporary-drawer__content {
  flex-grow: 1;
  margin: 0;
  overflow-x: hidden;
  overflow-y: auto;
  box-sizing: border-box;
  -webkit-overflow-scrolling: touch;
  touch-action: pan-y; }

.mdc-temporary-drawer__footer {
  box-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12);
  flex-shrink: 0; }

.mdc-temporary-drawer--animating::before {
  transition: opacity 0.3s 0ms cubic-bezier(0, 0, 0.2, 1); }

.mdc-temporary-drawer--animating.mdc-temporary-drawer--open .mdc-temporary-drawer__drawer {
  transition: transform 0.33s 0ms cubic-bezier(0, 0, 0.2, 1); }

.mdc-temporary-drawer--animating .mdc-temporary-drawer__drawer {
  transition: transform 0.13s 0ms cubic-bezier(0, 0, 0.2, 1); }

.mdc-temporary-drawer--open {
  pointer-events: auto; }

.mdc-temporary-drawer--open::before {
  opacity: 1;
  opacity: var(--mdc-temporary-drawer-opacity, 1); }

.mdc-temporary-drawer--open .mdc-temporary-drawer__drawer {
  transform: none; }

[dir="rtl"] .mdc-temporary-drawer--open .mdc-temporary-drawer__drawer, .mdc-temporary-drawer--open[dir="rtl"] .mdc-temporary-drawer__drawer {
  transform: none; }

.mdc-drawer-scroll-lock {
  height: 100vh;
  overflow: hidden; }

.icon {
  text-decoration: none;
  cursor: pointer;
  padding-right: 8px;
  padding-left: 8px;
  fill: currentColor; }

/*
  Precomputed linear color channel values, for use in contrast calculations.
  See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests

  Algorithm, for c in 0 to 255:
  f(c) {
    c = c / 255;
    return c < 0.03928 ? c / 12.92 : Math.pow((c + 0.055) / 1.055, 2.4);
  }

  This lookup table is needed since there is no `pow` in SASS.
*/
/**
 * Calculate the luminance for a color.
 * See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
 */
/**
 * Calculate the contrast ratio between two colors.
 * See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
 */
/**
 * Determine whether to use dark or light text on top of given color.
 * Returns "dark" for dark text and "light" for light text.
 */
/*
  Main theme colors.
  If you're a user customizing your color scheme in SASS, these are probably the only variables you need to change.
*/
/* Indigo 500 */
/* Pink A200 */
/* White */
/* Which set of text colors to use for each main theme color (light or dark) */
/* Text colors according to light vs dark and text type */
/* Primary text colors for each of the theme colors */
/** MDC Ripple keyframes are split into their own file so that _mixins.scss can rely on them. */
@keyframes mdc-ripple-fg-radius-in {
  from {
    transform: translate(var(--mdc-ripple-fg-translate-start, 0)) scale(1);
    animation-timing-function: cubic-bezier(0.4, 0, 0.2, 1); }
  to {
    transform: translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1)); } }

@keyframes mdc-ripple-fg-opacity-in {
  from {
    opacity: 0;
    animation-timing-function: linear; }
  to {
    opacity: 1; } }

@keyframes mdc-ripple-fg-opacity-out {
  from {
    opacity: 1;
    animation-timing-function: linear; }
  to {
    opacity: 0; } }

/**
 * Creates a rule that will be applied when an MDC-Web component is within the context of an RTL layout.
 *
 * Usage Example:
 * ```scss
 * .mdc-foo {
 *   position: absolute;
 *   left: 0;
 *
 *   @include mdc-rtl {
 *     left: auto;
 *     right: 0;
 *   }
 *
 *   &__bar {
 *     margin-left: 4px;
 *     @include mdc-rtl(".mdc-foo") {
 *       margin-left: auto;
 *       margin-right: 4px;
 *     }
 *   }
 * }
 *
 * .mdc-foo--mod {
 *   padding-left: 4px;
 *
 *   @include mdc-rtl {
 *     padding-left: auto;
 *     padding-right: 4px;
 *   }
 * }
 * ```
 *
 * Note that this works by checking for [dir="rtl"] on an ancestor element. While this will work
 * in most cases, it will in some cases lead to false negatives, e.g.
 *
 * ```html
 * <html dir="rtl">
 *   <!-- ... -->
 *   <div dir="ltr">
 *     <div class="mdc-foo">Styled incorrectly as RTL!</div>
 *   </div>
 * </html>
 * ```
 *
 * In the future, selectors such as :dir (http://mdn.io/:dir) will help us mitigate this.
 */
/**
 * Takes a base box-model property - e.g. margin / border / padding - along with a default
 * direction and value, and emits rules which apply the value to the
 * "<base-property>-<default-direction>" property by default, but flips the direction
 * when within an RTL context.
 *
 * For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-box(margin, left, 8px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-left: 8px;
 *
 *   @include mdc-rtl {
 *     margin-right: 8px;
 *     margin-left: 0;
 *   }
 * }
 * ```
 * whereas:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-box(margin, right, 8px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-right: 8px;
 *
 *   @include mdc-rtl {
 *     margin-right: 0;
 *     margin-left: 8px;
 *   }
 * }
 * ```
 *
 * You can also pass a 4th optional $root-selector argument which will be forwarded to `mdc-rtl`,
 * e.g. `@include mdc-rtl-reflexive-box-property(margin, left, 8px, ".mdc-component")`.
 *
 * Note that this function will always zero out the original value in an RTL context. If you're
 * trying to flip the values, use mdc-rtl-reflexive-property().
 */
/**
 * Takes a base property and emits rules that assign <base-property>-left to <left-value> and
 * <base-property>-right to <right-value> in a LTR context, and vice versa in a RTL context.
 * For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-property(margin, auto, 12px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-left: auto;
 *   margin-right: 12px;
 *
 *   @include mdc-rtl {
 *     margin-left: 12px;
 *     margin-right: auto;
 *   }
 * }
 * ```
 *
 * A 4th optional $root-selector argument can be given, which will be passed to `mdc-rtl`.
 */
/**
 * Takes an argument specifying a horizontal position property (either "left" or "right") as well
 * as a value, and applies that value to the specified position in a LTR context, and flips it in a
 * RTL context. For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-position(left, 0);
 *   position: absolute;
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 *  .mdc-foo {
 *    position: absolute;
 *    left: 0;
 *    right: initial;
 *
 *    @include mdc-rtl {
 *      right: 0;
 *      left: initial;
 *    }
 *  }
 * ```
 * An optional third $root-selector argument may also be given, which is passed to `mdc-rtl`.
 */
/*
  Precomputed linear color channel values, for use in contrast calculations.
  See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests

  Algorithm, for c in 0 to 255:
  f(c) {
    c = c / 255;
    return c < 0.03928 ? c / 12.92 : Math.pow((c + 0.055) / 1.055, 2.4);
  }

  This lookup table is needed since there is no `pow` in SASS.
*/
/**
 * Calculate the luminance for a color.
 * See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
 */
/**
 * Calculate the contrast ratio between two colors.
 * See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
 */
/**
 * Determine whether to use dark or light text on top of given color.
 * Returns "dark" for dark text and "light" for light text.
 */
/*
  Main theme colors.
  If you're a user customizing your color scheme in SASS, these are probably the only variables you need to change.
*/
/* Indigo 500 */
/* Pink A200 */
/* White */
/* Which set of text colors to use for each main theme color (light or dark) */
/* Text colors according to light vs dark and text type */
/* Primary text colors for each of the theme colors */
/**
 * Applies the correct theme color style to the specified property.
 * $property is typically color or background-color, but can be any CSS property that accepts color values.
 * $style should be one of the map keys in $mdc-theme-property-values (_variables.scss).
 */
/**
 * Creates a rule to be used in MDC-Web components for dark theming, and applies the provided contents.
 * Should provide the $root-selector option if applied to anything other than the root selector.
 * When used with a modifier class, provide a second argument of `true` for the $compound parameter
 * to specify that this should be attached as a compound class.
 *
 * Usage example:
 *
 * ```scss
 * .mdc-foo {
 *   color: black;
 *
 *   @include mdc-theme-dark {
 *     color: white;
 *   }
 *
 *   &__bar {
 *     background: black;
 *
 *     @include mdc-theme-dark(".mdc-foo") {
 *       background: white;
 *     }
 *   }
 * }
 *
 * .mdc-foo--disabled {
 *   opacity: .38;
 *
 *   @include mdc-theme-dark(".mdc-foo", true) {
 *     opacity: .5;
 *   }
 * }
 * ```
 */
/* TODO(sgomes): Figure out what to do about desktop font sizes. */
/* TODO(sgomes): Figure out what to do about i18n and i18n font sizes. */
/* TODO(sgomes): Figure out what to do about desktop font sizes. */
/* TODO(sgomes): Figure out what to do about i18n and i18n font sizes. */
.mdc-list {
  font-family: Roboto, sans-serif;
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  font-size: 1rem;
  font-weight: 400;
  letter-spacing: 0.04em;
  line-height: 1.75rem;
  color: rgba(0, 0, 0, 0.87);
  color: var(--mdc-theme-text-primary-on-background, rgba(0, 0, 0, 0.87));
  margin: 0;
  padding: 8px 16px 0;
  line-height: 1.5rem;
  list-style-type: none; }

.mdc-list--theme-dark,
.mdc-theme--dark .mdc-list {
  color: white;
  color: var(--mdc-theme-text-primary-on-dark, white); }

.mdc-list--dense {
  padding-top: 4px;
  font-size: .812rem; }

.mdc-list-item {
  display: flex;
  align-items: center;
  justify-content: flex-start;
  height: 48px; }

.mdc-list-item__start-detail {
  width: 24px;
  height: 24px;
  margin-left: 0;
  margin-right: 32px; }

[dir="rtl"] .mdc-list-item .mdc-list-item__start-detail,
.mdc-list-item[dir="rtl"] .mdc-list-item__start-detail {
  margin-left: 32px;
  margin-right: 0; }

.mdc-list-item__end-detail {
  width: 24px;
  height: 24px;
  margin-left: auto;
  margin-right: 16px; }

[dir="rtl"] .mdc-list-item .mdc-list-item__end-detail,
.mdc-list-item[dir="rtl"] .mdc-list-item__end-detail {
  margin-left: 16px;
  margin-right: auto; }

.mdc-list-item__text {
  display: inline-flex;
  flex-direction: column; }

.mdc-list-item__text__secondary {
  font-family: Roboto, sans-serif;
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  font-size: 0.875rem;
  font-weight: 400;
  letter-spacing: 0.04em;
  line-height: 1.25rem;
  color: rgba(0, 0, 0, 0.54);
  color: var(--mdc-theme-text-secondary-on-background, rgba(0, 0, 0, 0.54)); }

.mdc-list-item__text__secondary--theme-dark,
.mdc-theme--dark .mdc-list-item__text__secondary {
  color: rgba(255, 255, 255, 0.7);
  color: var(--mdc-theme-text-secondary-on-dark, rgba(255, 255, 255, 0.7)); }

.mdc-list--dense .mdc-list-item__text__secondary {
  font-size: inherit; }

.mdc-list--dense .mdc-list-item {
  height: 40px; }

.mdc-list--dense .mdc-list-item__start-detail {
  width: 20px;
  height: 20px;
  margin-left: 0;
  margin-right: 36px; }

[dir="rtl"] .mdc-list-item .mdc-list--dense .mdc-list-item__start-detail,
.mdc-list-item[dir="rtl"] .mdc-list--dense .mdc-list-item__start-detail {
  margin-left: 36px;
  margin-right: 0; }

.mdc-list--dense .mdc-list-item__end-detail {
  width: 20px;
  height: 20px; }

.mdc-list--avatar-list .mdc-list-item {
  height: 56px; }

.mdc-list--avatar-list .mdc-list-item__start-detail {
  width: 40px;
  height: 40px;
  margin-left: 0;
  margin-right: 16px;
  border-radius: 50%; }

[dir="rtl"] .mdc-list-item .mdc-list--avatar-list .mdc-list-item__start-detail,
.mdc-list-item[dir="rtl"] .mdc-list--avatar-list .mdc-list-item__start-detail {
  margin-left: 16px;
  margin-right: 0; }

.mdc-list-item .mdc-list--avatar-list.mdc-list--dense .mdc-list__item {
  height: 48px; }

.mdc-list-item .mdc-list--avatar-list.mdc-list--dense .mdc-list__item__start-detail {
  width: 36px;
  height: 36px;
  margin-left: 0;
  margin-right: 20px; }

[dir="rtl"] .mdc-list-item .mdc-list-item .mdc-list--avatar-list.mdc-list--dense .mdc-list__item__start-detail,
.mdc-list-item[dir="rtl"] .mdc-list-item .mdc-list--avatar-list.mdc-list--dense .mdc-list__item__start-detail {
  margin-left: 20px;
  margin-right: 0; }

.mdc-list--two-line .mdc-list-item {
  height: 72px; }

.mdc-list--two-line.mdc-list--dense .mdc-list-item {
  height: 60px; }

a.mdc-list-item {
  color: inherit;
  text-decoration: none; }

.mdc-list-item.mdc-ripple-upgraded {
  --mdc-ripple-surface-width: 0;
  --mdc-ripple-surface-height: 0;
  --mdc-ripple-fg-size: 0;
  --mdc-ripple-left: 0;
  --mdc-ripple-top: 0;
  --mdc-ripple-fg-scale: 1;
  --mdc-ripple-fg-translate-end: 0;
  --mdc-ripple-fg-translate-start: 0;
  will-change: transform, opacity;
  -webkit-tap-highlight-color: transparent;
  left: -16px;
  right: initial;
  position: relative;
  width: 100%;
  padding: 0 16px;
  overflow: hidden; }

.mdc-list-item.mdc-ripple-upgraded:not(.mdc-ripple-upgraded):hover::before, .mdc-list-item.mdc-ripple-upgraded:not(.mdc-ripple-upgraded):focus::before, .mdc-list-item.mdc-ripple-upgraded:not(.mdc-ripple-upgraded):active::after {
  transition-duration: 85ms;
  opacity: .6; }

.mdc-list-item.mdc-ripple-upgraded::before {
  background-color: rgba(0, 0, 0, 0.06);
  position: absolute;
  top: calc(50% - 100%);
  left: calc(50% - 100%);
  width: 200%;
  height: 200%;
  transition: opacity 250ms linear;
  border-radius: 50%;
  opacity: 0;
  pointer-events: none;
  content: ""; }

.mdc-list-item.mdc-ripple-upgraded.mdc-ripple-upgraded::before {
  top: calc(50% - 100%);
  left: calc(50% - 100%);
  width: 200%;
  height: 200%;
  transform: scale(0);
  transform: scale(var(--mdc-ripple-fg-scale, 0)); }

.mdc-list-item.mdc-ripple-upgraded.mdc-ripple-upgraded--background-focused::before {
  opacity: .99999; }

.mdc-list-item.mdc-ripple-upgraded.mdc-ripple-upgraded--background-active-fill::before {
  transition-duration: 120ms;
  opacity: 1; }

.mdc-list-item.mdc-ripple-upgraded.mdc-ripple-upgraded--unbounded::before {
  top: calc(50% - 50%);
  top: var(--mdc-ripple-top, calc(50% - 50%));
  left: calc(50% - 50%);
  left: var(--mdc-ripple-left, calc(50% - 50%));
  width: 100%;
  width: var(--mdc-ripple-fg-size, 100%);
  height: 100%;
  height: var(--mdc-ripple-fg-size, 100%);
  transform: scale(0);
  transform: scale(var(--mdc-ripple-fg-scale, 0)); }

.mdc-list-item.mdc-ripple-upgraded::after {
  background-color: rgba(0, 0, 0, 0.06);
  position: absolute;
  top: calc(50% - 100%);
  left: calc(50% - 100%);
  width: 200%;
  height: 200%;
  transition: opacity 250ms linear;
  border-radius: 50%;
  opacity: 0;
  pointer-events: none;
  content: ""; }

.mdc-list-item.mdc-ripple-upgraded.mdc-ripple-upgraded::after {
  top: 0;
  left: 0;
  width: 100%;
  width: var(--mdc-ripple-fg-size, 100%);
  height: 100%;
  height: var(--mdc-ripple-fg-size, 100%);
  transform: scale(0);
  transform-origin: center center;
  opacity: 0; }

.mdc-list-item.mdc-ripple-upgraded:not(.mdc-ripple-upgraded--unbounded)::after {
  transform-origin: center center; }

.mdc-list-item.mdc-ripple-upgraded.mdc-ripple-upgraded--unbounded::after {
  top: 0;
  top: var(--mdc-ripple-top, 0);
  left: 0;
  left: var(--mdc-ripple-left, 0);
  width: 100%;
  width: var(--mdc-ripple-fg-size, 100%);
  height: 100%;
  height: var(--mdc-ripple-fg-size, 100%);
  transform: scale(0);
  transform-origin: center center; }

.mdc-list-item.mdc-ripple-upgraded.mdc-ripple-upgraded--foreground-activation::after {
  animation: 300ms mdc-ripple-fg-radius-in forwards, 83ms mdc-ripple-fg-opacity-in forwards; }

.mdc-list-item.mdc-ripple-upgraded.mdc-ripple-upgraded--foreground-deactivation::after {
  transform: translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1));
  animation: 83ms mdc-ripple-fg-opacity-out; }

[dir="rtl"] .mdc-list-item.mdc-ripple-upgraded, .mdc-list-item.mdc-ripple-upgraded[dir="rtl"] {
  left: initial;
  right: -16px; }

.mdc-list-item.mdc-ripple-upgraded:focus {
  outline: none; }

.mdc-list--theme-dark .mdc-list-item.mdc-ripple-upgraded::before,
.mdc-theme--dark .mdc-list-item.mdc-ripple-upgraded::before {
  background-color: rgba(255, 255, 255, 0.12);
  position: absolute;
  top: calc(50% - 100%);
  left: calc(50% - 100%);
  width: 200%;
  height: 200%;
  transition: opacity 250ms linear;
  border-radius: 50%;
  opacity: 0;
  pointer-events: none;
  content: ""; }

.mdc-list--theme-dark .mdc-list-item.mdc-ripple-upgraded.mdc-ripple-upgraded::before,
.mdc-theme--dark .mdc-list-item.mdc-ripple-upgraded.mdc-ripple-upgraded::before {
  top: calc(50% - 100%);
  left: calc(50% - 100%);
  width: 200%;
  height: 200%;
  transform: scale(0);
  transform: scale(var(--mdc-ripple-fg-scale, 0)); }

.mdc-list--theme-dark .mdc-list-item.mdc-ripple-upgraded.mdc-ripple-upgraded--background-focused::before,
.mdc-theme--dark .mdc-list-item.mdc-ripple-upgraded.mdc-ripple-upgraded--background-focused::before {
  opacity: .99999; }

.mdc-list--theme-dark .mdc-list-item.mdc-ripple-upgraded.mdc-ripple-upgraded--background-active-fill::before,
.mdc-theme--dark .mdc-list-item.mdc-ripple-upgraded.mdc-ripple-upgraded--background-active-fill::before {
  transition-duration: 120ms;
  opacity: 1; }

.mdc-list--theme-dark .mdc-list-item.mdc-ripple-upgraded.mdc-ripple-upgraded--unbounded::before,
.mdc-theme--dark .mdc-list-item.mdc-ripple-upgraded.mdc-ripple-upgraded--unbounded::before {
  top: calc(50% - 50%);
  top: var(--mdc-ripple-top, calc(50% - 50%));
  left: calc(50% - 50%);
  left: var(--mdc-ripple-left, calc(50% - 50%));
  width: 100%;
  width: var(--mdc-ripple-fg-size, 100%);
  height: 100%;
  height: var(--mdc-ripple-fg-size, 100%);
  transform: scale(0);
  transform: scale(var(--mdc-ripple-fg-scale, 0)); }

.mdc-list--theme-dark .mdc-list-item.mdc-ripple-upgraded::after,
.mdc-theme--dark .mdc-list-item.mdc-ripple-upgraded::after {
  background-color: rgba(255, 255, 255, 0.12);
  position: absolute;
  top: calc(50% - 100%);
  left: calc(50% - 100%);
  width: 200%;
  height: 200%;
  transition: opacity 250ms linear;
  border-radius: 50%;
  opacity: 0;
  pointer-events: none;
  content: ""; }

.mdc-list--theme-dark .mdc-list-item.mdc-ripple-upgraded.mdc-ripple-upgraded::after,
.mdc-theme--dark .mdc-list-item.mdc-ripple-upgraded.mdc-ripple-upgraded::after {
  top: 0;
  left: 0;
  width: 100%;
  width: var(--mdc-ripple-fg-size, 100%);
  height: 100%;
  height: var(--mdc-ripple-fg-size, 100%);
  transform: scale(0);
  transform-origin: center center;
  opacity: 0; }

.mdc-list--theme-dark .mdc-list-item.mdc-ripple-upgraded:not(.mdc-ripple-upgraded--unbounded)::after,
.mdc-theme--dark .mdc-list-item.mdc-ripple-upgraded:not(.mdc-ripple-upgraded--unbounded)::after {
  transform-origin: center center; }

.mdc-list--theme-dark .mdc-list-item.mdc-ripple-upgraded.mdc-ripple-upgraded--unbounded::after,
.mdc-theme--dark .mdc-list-item.mdc-ripple-upgraded.mdc-ripple-upgraded--unbounded::after {
  top: 0;
  top: var(--mdc-ripple-top, 0);
  left: 0;
  left: var(--mdc-ripple-left, 0);
  width: 100%;
  width: var(--mdc-ripple-fg-size, 100%);
  height: 100%;
  height: var(--mdc-ripple-fg-size, 100%);
  transform: scale(0);
  transform-origin: center center; }

.mdc-list--theme-dark .mdc-list-item.mdc-ripple-upgraded.mdc-ripple-upgraded--foreground-activation::after,
.mdc-theme--dark .mdc-list-item.mdc-ripple-upgraded.mdc-ripple-upgraded--foreground-activation::after {
  animation: 300ms mdc-ripple-fg-radius-in forwards, 83ms mdc-ripple-fg-opacity-in forwards; }

.mdc-list--theme-dark .mdc-list-item.mdc-ripple-upgraded.mdc-ripple-upgraded--foreground-deactivation::after,
.mdc-theme--dark .mdc-list-item.mdc-ripple-upgraded.mdc-ripple-upgraded--foreground-deactivation::after {
  transform: translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1));
  animation: 83ms mdc-ripple-fg-opacity-out; }

.mdc-list-divider {
  height: 0;
  margin: 0;
  border: none;
  border-bottom: 1px solid rgba(0, 0, 0, 0.12); }

.mdc-list--theme-dark .mdc-list-divider,
.mdc-theme--dark .mdc-list-divider {
  border-bottom-color: rgba(255, 255, 255, 0.2); }

.mdc-list-divider--inset {
  margin-left: 56px;
  margin-right: 0;
  width: calc(100% - 56px); }

[dir="rtl"] .mdc-list-group .mdc-list-divider--inset,
.mdc-list-group[dir="rtl"] .mdc-list-divider--inset {
  margin-left: 0;
  margin-right: 56px; }

.mdc-list-group {
  padding: 0 16px; }

.mdc-list-group__subheader {
  font-family: Roboto, sans-serif;
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  font-size: 0.875rem;
  font-weight: 500;
  letter-spacing: 0.04em;
  line-height: 1.5rem;
  color: rgba(0, 0, 0, 0.87);
  color: var(--mdc-theme-text-primary-on-background, rgba(0, 0, 0, 0.87));
  margin: 0.75rem 0; }

.mdc-list-group__subheader--theme-dark,
.mdc-theme--dark .mdc-list-group__subheader {
  color: white;
  color: var(--mdc-theme-text-primary-on-dark, white); }

.mdc-list-group .mdc-list {
  padding: 0; }

/*
  Precomputed linear color channel values, for use in contrast calculations.
  See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests

  Algorithm, for c in 0 to 255:
  f(c) {
    c = c / 255;
    return c < 0.03928 ? c / 12.92 : Math.pow((c + 0.055) / 1.055, 2.4);
  }

  This lookup table is needed since there is no `pow` in SASS.
*/
/**
 * Calculate the luminance for a color.
 * See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
 */
/**
 * Calculate the contrast ratio between two colors.
 * See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
 */
/**
 * Determine whether to use dark or light text on top of given color.
 * Returns "dark" for dark text and "light" for light text.
 */
/*
  Main theme colors.
  If you're a user customizing your color scheme in SASS, these are probably the only variables you need to change.
*/
/* Indigo 500 */
/* Pink A200 */
/* White */
/* Which set of text colors to use for each main theme color (light or dark) */
/* Text colors according to light vs dark and text type */
/* Primary text colors for each of the theme colors */
/**
 * Applies the correct theme color style to the specified property.
 * $property is typically color or background-color, but can be any CSS property that accepts color values.
 * $style should be one of the map keys in $mdc-theme-property-values (_variables.scss).
 */
/**
 * Creates a rule to be used in MDC-Web components for dark theming, and applies the provided contents.
 * Should provide the $root-selector option if applied to anything other than the root selector.
 * When used with a modifier class, provide a second argument of `true` for the $compound parameter
 * to specify that this should be attached as a compound class.
 *
 * Usage example:
 *
 * ```scss
 * .mdc-foo {
 *   color: black;
 *
 *   @include mdc-theme-dark {
 *     color: white;
 *   }
 *
 *   &__bar {
 *     background: black;
 *
 *     @include mdc-theme-dark(".mdc-foo") {
 *       background: white;
 *     }
 *   }
 * }
 *
 * .mdc-foo--disabled {
 *   opacity: .38;
 *
 *   @include mdc-theme-dark(".mdc-foo", true) {
 *     opacity: .5;
 *   }
 * }
 * ```
 */
@keyframes primary-indeterminate-translate {
  0% {
    transform: translateX(0); }
  20% {
    animation-timing-function: cubic-bezier(0.5, 0, 0.70173, 0.49582);
    transform: translateX(0); }
  59.15% {
    animation-timing-function: cubic-bezier(0.30244, 0.38135, 0.55, 0.95635);
    transform: translateX(83.67142%); }
  100% {
    transform: translateX(200.61106%); } }

@keyframes primary-indeterminate-scale {
  0% {
    transform: scaleX(0.08); }
  36.65% {
    animation-timing-function: cubic-bezier(0.33473, 0.12482, 0.78584, 1);
    transform: scaleX(0.08); }
  69.15% {
    animation-timing-function: cubic-bezier(0.06, 0.11, 0.6, 1);
    transform: scaleX(0.66148); }
  100% {
    transform: scaleX(0.08); } }

@keyframes secondary-indeterminate-translate {
  0% {
    animation-timing-function: cubic-bezier(0.15, 0, 0.51506, 0.40969);
    transform: translateX(0); }
  25% {
    animation-timing-function: cubic-bezier(0.31033, 0.28406, 0.8, 0.73371);
    transform: translateX(37.65191%); }
  48.35% {
    animation-timing-function: cubic-bezier(0.4, 0.62704, 0.6, 0.90203);
    transform: translateX(84.38617%); }
  100% {
    transform: translateX(160.27778%); } }

@keyframes secondary-indeterminate-scale {
  0% {
    animation-timing-function: cubic-bezier(0.20503, 0.05705, 0.57661, 0.45397);
    transform: scaleX(0.08); }
  19.15% {
    animation-timing-function: cubic-bezier(0.15231, 0.19643, 0.64837, 1.00432);
    transform: scaleX(0.4571); }
  44.15% {
    animation-timing-function: cubic-bezier(0.25776, -0.00316, 0.21176, 1.38179);
    transform: scaleX(0.72796); }
  100% {
    transform: scaleX(0.08); } }

@keyframes buffering {
  to {
    transform: translateX(-10px); } }

@keyframes primary-indeterminate-translate-reverse {
  0% {
    transform: translateX(0); }
  20% {
    animation-timing-function: cubic-bezier(0.5, 0, 0.70173, 0.49582);
    transform: translateX(0); }
  59.15% {
    animation-timing-function: cubic-bezier(0.30244, 0.38135, 0.55, 0.95635);
    transform: translateX(-83.67142%); }
  100% {
    transform: translateX(-200.61106%); } }

@keyframes secondary-indeterminate-translate-reverse {
  0% {
    animation-timing-function: cubic-bezier(0.15, 0, 0.51506, 0.40969);
    transform: translateX(0); }
  25% {
    animation-timing-function: cubic-bezier(0.31033, 0.28406, 0.8, 0.73371);
    transform: translateX(-37.65191%); }
  48.35% {
    animation-timing-function: cubic-bezier(0.4, 0.62704, 0.6, 0.90203);
    transform: translateX(-84.38617%); }
  100% {
    transform: translateX(-160.27778%); } }

@keyframes buffering-reverse {
  to {
    transform: translateX(10px); } }

.mdc-linear-progress {
  position: relative;
  width: 100%;
  height: 4px;
  transform: translateZ(0);
  transition: opacity 250ms 0ms cubic-bezier(0.4, 0, 1, 1);
  overflow: hidden; }

.mdc-linear-progress__bar {
  animation: none;
  position: absolute;
  width: 100%;
  height: 100%;
  transform-origin: top left;
  transition: transform 250ms 0ms cubic-bezier(0.4, 0, 1, 1); }

.mdc-linear-progress__bar-inner {
  background-color: #076969;
  background-color: var(--mdc-theme-primary, #076969);
  animation: none;
  display: inline-block;
  position: absolute;
  width: 100%;
  height: 100%; }

.mdc-linear-progress--accent .mdc-linear-progress__bar-inner {
  background-color: #af790c;
  background-color: var(--mdc-theme-accent, #af790c); }

.mdc-linear-progress__buffering-dots {
  position: absolute;
  width: 100%;
  height: 100%;
  background-image: url("data:image/svg+xml,%3Csvg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' x='0px' y='0px' enable-background='new 0 0 5 2' xml:space='preserve' viewBox='0 0 5 2' preserveAspectRatio='none slice'%3E%3Ccircle cx='1' cy='1' r='1' fill='%23e6e6e6'/%3E%3C/svg%3E");
  background-repeat: repeat-x;
  background-size: 10px 4px;
  animation: buffering 250ms infinite linear; }

.mdc-linear-progress__buffer {
  position: absolute;
  width: 100%;
  height: 100%;
  transform-origin: top left;
  transition: transform 250ms 0ms cubic-bezier(0.4, 0, 1, 1);
  background-color: #e6e6e6; }

.mdc-linear-progress__secondary-bar {
  visibility: hidden; }

.mdc-linear-progress--indeterminate .mdc-linear-progress__bar {
  transition: none; }

.mdc-linear-progress--indeterminate .mdc-linear-progress__primary-bar {
  animation: primary-indeterminate-translate 2s infinite linear;
  left: -145.166611%; }

.mdc-linear-progress--indeterminate .mdc-linear-progress__primary-bar > .mdc-linear-progress__bar-inner {
  animation: primary-indeterminate-scale 2s infinite linear; }

.mdc-linear-progress--indeterminate .mdc-linear-progress__secondary-bar {
  animation: secondary-indeterminate-translate 2s infinite linear;
  left: -54.888891%;
  visibility: visible; }

.mdc-linear-progress--indeterminate .mdc-linear-progress__secondary-bar > .mdc-linear-progress__bar-inner {
  animation: secondary-indeterminate-scale 2s infinite linear; }

.mdc-linear-progress--reversed .mdc-linear-progress__bar,
.mdc-linear-progress--reversed .mdc-linear-progress__buffer {
  right: 0;
  transform-origin: center right; }

.mdc-linear-progress--reversed .mdc-linear-progress__primary-bar {
  animation-name: primary-indeterminate-translate-reverse; }

.mdc-linear-progress--reversed .mdc-linear-progress__secondary-bar {
  animation-name: secondary-indeterminate-translate-reverse; }

.mdc-linear-progress--reversed .mdc-linear-progress__buffering-dots {
  animation: buffering-reverse 250ms infinite linear; }

.mdc-linear-progress--closed {
  opacity: 0; }

.mdc-linear-progress--indeterminate.mdc-linear-progress--reversed .mdc-linear-progress__primary-bar {
  right: -145.166611%;
  left: auto; }

.mdc-linear-progress--indeterminate.mdc-linear-progress--reversed .mdc-linear-progress__secondary-bar {
  right: -54.888891%;
  left: auto; }

/**
 * The css property used for elevation. In most cases this should not be changed. It is exposed
 * as a variable for abstraction / easy use when needing to reference the property directly, for
 * example in a `will-change` rule.
 */
/**
 * The default duration value for elevation transitions.
 */
/**
 * The default easing value for elevation transitions.
 */
/**
 * Applies the correct css rules to an element to give it the elevation specified by $z-value.
 * The $z-value must be between 0 and 24.
 */
/**
 * Returns a string that can be used as the value for a `transition` property for elevation.
 * Calling this function directly is useful in situations where a component needs to transition
 * more than one property.
 *
 * ```scss
 * .foo {
 *   transition: mdc-elevation-transition-rule(), opacity 100ms ease;
 *   will-change: $mdc-elevation-property, opacity;
 * }
 * ```
 */
/**
 * Applies the correct css rules needed to have an element transition between elevations.
 * This mixin should be applied to elements whose elevation values will change depending on their
 * context (e.g. when active or disabled).
 */
/*
  Precomputed linear color channel values, for use in contrast calculations.
  See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests

  Algorithm, for c in 0 to 255:
  f(c) {
    c = c / 255;
    return c < 0.03928 ? c / 12.92 : Math.pow((c + 0.055) / 1.055, 2.4);
  }

  This lookup table is needed since there is no `pow` in SASS.
*/
/**
 * Calculate the luminance for a color.
 * See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
 */
/**
 * Calculate the contrast ratio between two colors.
 * See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
 */
/**
 * Determine whether to use dark or light text on top of given color.
 * Returns "dark" for dark text and "light" for light text.
 */
/*
  Main theme colors.
  If you're a user customizing your color scheme in SASS, these are probably the only variables you need to change.
*/
/* Indigo 500 */
/* Pink A200 */
/* White */
/* Which set of text colors to use for each main theme color (light or dark) */
/* Text colors according to light vs dark and text type */
/* Primary text colors for each of the theme colors */
/**
 * Applies the correct theme color style to the specified property.
 * $property is typically color or background-color, but can be any CSS property that accepts color values.
 * $style should be one of the map keys in $mdc-theme-property-values (_variables.scss).
 */
/**
 * Creates a rule to be used in MDC-Web components for dark theming, and applies the provided contents.
 * Should provide the $root-selector option if applied to anything other than the root selector.
 * When used with a modifier class, provide a second argument of `true` for the $compound parameter
 * to specify that this should be attached as a compound class.
 *
 * Usage example:
 *
 * ```scss
 * .mdc-foo {
 *   color: black;
 *
 *   @include mdc-theme-dark {
 *     color: white;
 *   }
 *
 *   &__bar {
 *     background: black;
 *
 *     @include mdc-theme-dark(".mdc-foo") {
 *       background: white;
 *     }
 *   }
 * }
 *
 * .mdc-foo--disabled {
 *   opacity: .38;
 *
 *   @include mdc-theme-dark(".mdc-foo", true) {
 *     opacity: .5;
 *   }
 * }
 * ```
 */
/* TODO(sgomes): Figure out what to do about desktop font sizes. */
/* TODO(sgomes): Figure out what to do about i18n and i18n font sizes. */
/* postcss-bem-linter: define simple-menu */
.mdc-simple-menu {
  display: none;
  position: absolute;
  min-width: 170px;
  max-width: calc(100vw - 32px);
  max-height: calc(100vh - 32px);
  margin: 0;
  padding: 0;
  transform: scale(0);
  transform-origin: top left;
  border-radius: 2px;
  background-color: white;
  white-space: nowrap;
  opacity: 0;
  overflow: hidden;
  box-sizing: border-box;
  will-change: transform, opacity;
  z-index: 4;
  box-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12);
  /* stylelint-disable plugin/selector-bem-pattern */
  /* stylelint-enable plugin/selector-bem-pattern */
  /* stylelint-disable plugin/selector-bem-pattern */
  /* stylelint-disable selector-no-qualifying-type */
  /* stylelint-enable selector-no-qualifying-type */
  /* TODO(sgomes): Revisit when we have interactive lists. */
  /* stylelint-enable plugin/selector-bem-pattern */ }

.mdc-simple-menu--theme-dark,
.mdc-theme--dark .mdc-simple-menu {
  background-color: #424242; }

.mdc-simple-menu:focus {
  outline: none; }

.mdc-simple-menu--open {
  display: inline-block;
  transform: scale(1);
  opacity: 1; }

.mdc-simple-menu--animating {
  display: inline-block;
  transition: opacity 0.2s cubic-bezier(0, 0, 0.2, 1); }

.mdc-simple-menu__items {
  overflow-x: hidden;
  overflow-y: auto;
  box-sizing: border-box;
  will-change: transform;
  /* stylelint-disable plugin/selector-bem-pattern, selector-no-universal */
  /* stylelint-enable plugin/selector-bem-pattern, selector-no-universal */ }

.mdc-simple-menu__items > * {
  opacity: 0; }

.mdc-simple-menu__items > .mdc-list-item {
  cursor: pointer; }

.mdc-simple-menu--animating .mdc-simple-menu__items {
  overflow-y: hidden; }

.mdc-simple-menu--animating .mdc-simple-menu__items > * {
  transition-duration: 0.3s;
  transition-property: opacity;
  transition-timing-function: cubic-bezier(0, 0, 0.2, 1); }

.mdc-simple-menu--open .mdc-simple-menu__items > * {
  opacity: 1;
  will-change: opacity; }

[dir="rtl"] .mdc-simple-menu {
  transform-origin: top right; }

.mdc-simple-menu--open-from-top-left {
  transform-origin: top left !important; }

.mdc-simple-menu--open-from-top-right {
  transform-origin: top right !important; }

.mdc-simple-menu--open-from-bottom-left {
  transform-origin: bottom left !important; }

.mdc-simple-menu--open-from-bottom-right {
  transform-origin: bottom right !important; }

.mdc-simple-menu .mdc-list-group,
.mdc-simple-menu .mdc-list {
  padding: 8px 0; }

.mdc-simple-menu .mdc-list-item {
  position: relative;
  padding: 0 16px;
  outline: none;
  color: inherit;
  text-decoration: none;
  user-select: none;
  font-family: Roboto, sans-serif;
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  font-size: 1rem;
  font-weight: 400;
  letter-spacing: 0.04em;
  line-height: 1.75rem; }

.mdc-simple-menu--theme-dark.mdc-simple-menu .mdc-list-item,
.mdc-theme--dark .mdc-simple-menu .mdc-list-item {
  color: white; }

.mdc-simple-menu--theme-dark.mdc-simple-menu .mdc-list-divider,
.mdc-theme--dark .mdc-simple-menu .mdc-list-divider {
  border-color: rgba(255, 255, 255, 0.12); }

.mdc-simple-menu .mdc-list-item__start-detail {
  color: rgba(0, 0, 0, 0.54); }

.mdc-simple-menu--theme-dark.mdc-simple-menu .mdc-list-item__start-detail,
.mdc-theme--dark .mdc-simple-menu .mdc-list-item__start-detail {
  color: rgba(255, 255, 255, 0.54); }

.mdc-simple-menu--selected.mdc-list-item,
.mdc-simple-menu--selected.mdc-list-item .mdc-list-item__start-detail {
  color: #076969;
  color: var(--mdc-theme-primary, #076969); }

.mdc-simple-menu .mdc-list-item::before {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  transition: opacity 120ms cubic-bezier(0, 0, 0.2, 1);
  border-radius: inherit;
  background: currentColor;
  content: "";
  opacity: 0; }

.mdc-simple-menu .mdc-list-item:focus::before {
  opacity: .12; }

.mdc-simple-menu .mdc-list-item:active::before {
  /*
      Slightly darker value for visual distinction.
      This allows a full base that has distinct modes.
      Progressive enhancement with ripples will provide complete button spec alignment.
    */
  opacity: .18; }

.mdc-simple-menu .mdc-list-item[aria-disabled="true"] {
  cursor: default;
  color: rgba(0, 0, 0, 0.38);
  color: var(--mdc-theme-text-disabled-on-light, rgba(0, 0, 0, 0.38)); }

.mdc-select--theme-dark .mdc-simple-menu .mdc-list-item[aria-disabled="true"],
.mdc-theme--dark .mdc-simple-menu .mdc-list-item[aria-disabled="true"] {
  color: rgba(255, 255, 255, 0.5);
  color: var(--mdc-theme-text-disabled-on-dark, rgba(255, 255, 255, 0.5)); }

.mdc-simple-menu .mdc-list-item[aria-disabled="true"]:focus::before, .mdc-simple-menu .mdc-list-item[aria-disabled="true"]:active::before {
  opacity: 0; }

/* postcss-bem-linter: end */
.mdc-menu-anchor {
  position: relative;
  overflow: visible; }

/**
 * The css property used for elevation. In most cases this should not be changed. It is exposed
 * as a variable for abstraction / easy use when needing to reference the property directly, for
 * example in a `will-change` rule.
 */
/**
 * The default duration value for elevation transitions.
 */
/**
 * The default easing value for elevation transitions.
 */
/**
 * Applies the correct css rules to an element to give it the elevation specified by $z-value.
 * The $z-value must be between 0 and 24.
 */
/**
 * Returns a string that can be used as the value for a `transition` property for elevation.
 * Calling this function directly is useful in situations where a component needs to transition
 * more than one property.
 *
 * ```scss
 * .foo {
 *   transition: mdc-elevation-transition-rule(), opacity 100ms ease;
 *   will-change: $mdc-elevation-property, opacity;
 * }
 * ```
 */
/**
 * Applies the correct css rules needed to have an element transition between elevations.
 * This mixin should be applied to elements whose elevation values will change depending on their
 * context (e.g. when active or disabled).
 */
.mdc-elevation--z0 {
  box-shadow: 0px 0px 0px 0px rgba(0, 0, 0, 0.2), 0px 0px 0px 0px rgba(0, 0, 0, 0.14), 0px 0px 0px 0px rgba(0, 0, 0, 0.12); }

.mdc-elevation--z1 {
  box-shadow: 0px 2px 1px -1px rgba(0, 0, 0, 0.2), 0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 1px 3px 0px rgba(0, 0, 0, 0.12); }

.mdc-elevation--z2 {
  box-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12); }

.mdc-elevation--z3 {
  box-shadow: 0px 3px 3px -2px rgba(0, 0, 0, 0.2), 0px 3px 4px 0px rgba(0, 0, 0, 0.14), 0px 1px 8px 0px rgba(0, 0, 0, 0.12); }

.mdc-elevation--z4 {
  box-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2), 0px 4px 5px 0px rgba(0, 0, 0, 0.14), 0px 1px 10px 0px rgba(0, 0, 0, 0.12); }

.mdc-elevation--z5 {
  box-shadow: 0px 3px 5px -1px rgba(0, 0, 0, 0.2), 0px 5px 8px 0px rgba(0, 0, 0, 0.14), 0px 1px 14px 0px rgba(0, 0, 0, 0.12); }

.mdc-elevation--z6 {
  box-shadow: 0px 3px 5px -1px rgba(0, 0, 0, 0.2), 0px 6px 10px 0px rgba(0, 0, 0, 0.14), 0px 1px 18px 0px rgba(0, 0, 0, 0.12); }

.mdc-elevation--z7 {
  box-shadow: 0px 4px 5px -2px rgba(0, 0, 0, 0.2), 0px 7px 10px 1px rgba(0, 0, 0, 0.14), 0px 2px 16px 1px rgba(0, 0, 0, 0.12); }

.mdc-elevation--z8 {
  box-shadow: 0px 5px 5px -3px rgba(0, 0, 0, 0.2), 0px 8px 10px 1px rgba(0, 0, 0, 0.14), 0px 3px 14px 2px rgba(0, 0, 0, 0.12); }

.mdc-elevation--z9 {
  box-shadow: 0px 5px 6px -3px rgba(0, 0, 0, 0.2), 0px 9px 12px 1px rgba(0, 0, 0, 0.14), 0px 3px 16px 2px rgba(0, 0, 0, 0.12); }

.mdc-elevation--z10 {
  box-shadow: 0px 6px 6px -3px rgba(0, 0, 0, 0.2), 0px 10px 14px 1px rgba(0, 0, 0, 0.14), 0px 4px 18px 3px rgba(0, 0, 0, 0.12); }

.mdc-elevation--z11 {
  box-shadow: 0px 6px 7px -4px rgba(0, 0, 0, 0.2), 0px 11px 15px 1px rgba(0, 0, 0, 0.14), 0px 4px 20px 3px rgba(0, 0, 0, 0.12); }

.mdc-elevation--z12 {
  box-shadow: 0px 7px 8px -4px rgba(0, 0, 0, 0.2), 0px 12px 17px 2px rgba(0, 0, 0, 0.14), 0px 5px 22px 4px rgba(0, 0, 0, 0.12); }

.mdc-elevation--z13 {
  box-shadow: 0px 7px 8px -4px rgba(0, 0, 0, 0.2), 0px 13px 19px 2px rgba(0, 0, 0, 0.14), 0px 5px 24px 4px rgba(0, 0, 0, 0.12); }

.mdc-elevation--z14 {
  box-shadow: 0px 7px 9px -4px rgba(0, 0, 0, 0.2), 0px 14px 21px 2px rgba(0, 0, 0, 0.14), 0px 5px 26px 4px rgba(0, 0, 0, 0.12); }

.mdc-elevation--z15 {
  box-shadow: 0px 8px 9px -5px rgba(0, 0, 0, 0.2), 0px 15px 22px 2px rgba(0, 0, 0, 0.14), 0px 6px 28px 5px rgba(0, 0, 0, 0.12); }

.mdc-elevation--z16 {
  box-shadow: 0px 8px 10px -5px rgba(0, 0, 0, 0.2), 0px 16px 24px 2px rgba(0, 0, 0, 0.14), 0px 6px 30px 5px rgba(0, 0, 0, 0.12); }

.mdc-elevation--z17 {
  box-shadow: 0px 8px 11px -5px rgba(0, 0, 0, 0.2), 0px 17px 26px 2px rgba(0, 0, 0, 0.14), 0px 6px 32px 5px rgba(0, 0, 0, 0.12); }

.mdc-elevation--z18 {
  box-shadow: 0px 9px 11px -5px rgba(0, 0, 0, 0.2), 0px 18px 28px 2px rgba(0, 0, 0, 0.14), 0px 7px 34px 6px rgba(0, 0, 0, 0.12); }

.mdc-elevation--z19 {
  box-shadow: 0px 9px 12px -6px rgba(0, 0, 0, 0.2), 0px 19px 29px 2px rgba(0, 0, 0, 0.14), 0px 7px 36px 6px rgba(0, 0, 0, 0.12); }

.mdc-elevation--z20 {
  box-shadow: 0px 10px 13px -6px rgba(0, 0, 0, 0.2), 0px 20px 31px 3px rgba(0, 0, 0, 0.14), 0px 8px 38px 7px rgba(0, 0, 0, 0.12); }

.mdc-elevation--z21 {
  box-shadow: 0px 10px 13px -6px rgba(0, 0, 0, 0.2), 0px 21px 33px 3px rgba(0, 0, 0, 0.14), 0px 8px 40px 7px rgba(0, 0, 0, 0.12); }

.mdc-elevation--z22 {
  box-shadow: 0px 10px 14px -6px rgba(0, 0, 0, 0.2), 0px 22px 35px 3px rgba(0, 0, 0, 0.14), 0px 8px 42px 7px rgba(0, 0, 0, 0.12); }

.mdc-elevation--z23 {
  box-shadow: 0px 11px 14px -7px rgba(0, 0, 0, 0.2), 0px 23px 36px 3px rgba(0, 0, 0, 0.14), 0px 9px 44px 8px rgba(0, 0, 0, 0.12); }

.mdc-elevation--z24 {
  box-shadow: 0px 11px 15px -7px rgba(0, 0, 0, 0.2), 0px 24px 38px 3px rgba(0, 0, 0, 0.14), 0px 9px 46px 8px rgba(0, 0, 0, 0.12); }

.mdc-elevation-transition {
  transition: box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);
  will-change: box-shadow; }

.chordscontainer {
  margin: 1rem;
  display: grid;
  grid-gap: 1rem; }

@media only screen and (max-width: 768px) {
  .chordscontainer {
    grid-template-columns: repeat(4, 1fr); } }

@media only screen and (min-width: 768px) {
  .chordscontainer {
    grid-template-columns: repeat(8, 1fr); } }

.chordscontainer .chords {
  padding: 1rem;
  border-radius: 5;
  text-align: center; }

.chordscontainer .pulse {
  background-color: #e0f2f1;
  animation: chordPulse .5s ease-out alternate infinite; }

.chordscontainer .active {
  background-color: #b2dfdb; }

@keyframes chordPulse {
  0% {
    box-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12); }
  100% {
    box-shadow: 0px 7px 8px -4px rgba(0, 0, 0, 0.2), 0px 12px 17px 2px rgba(0, 0, 0, 0.14), 0px 5px 22px 4px rgba(0, 0, 0, 0.12); } }

.chord-list .chord-list-item {
  box-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12);
  height: auto !important;
  padding: 1rem;
  margin: 1rem;
  cursor: pointer; }

.chord-list .chord-list-item:hover {
  box-shadow: 0px 5px 5px -3px rgba(0, 0, 0, 0.2), 0px 8px 10px 1px rgba(0, 0, 0, 0.14), 0px 3px 14px 2px rgba(0, 0, 0, 0.12); }

.chord-list .chord-list-item:active {
  box-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2), 0px 4px 5px 0px rgba(0, 0, 0, 0.14), 0px 1px 10px 0px rgba(0, 0, 0, 0.12); }

.chord-list .chord-list-item .chord-list-item-img {
  height: auto !important;
  width: auto !important; }

/**
 * The css property used for elevation. In most cases this should not be changed. It is exposed
 * as a variable for abstraction / easy use when needing to reference the property directly, for
 * example in a `will-change` rule.
 */
/**
 * The default duration value for elevation transitions.
 */
/**
 * The default easing value for elevation transitions.
 */
/**
 * Applies the correct css rules to an element to give it the elevation specified by $z-value.
 * The $z-value must be between 0 and 24.
 */
/**
 * Returns a string that can be used as the value for a `transition` property for elevation.
 * Calling this function directly is useful in situations where a component needs to transition
 * more than one property.
 *
 * ```scss
 * .foo {
 *   transition: mdc-elevation-transition-rule(), opacity 100ms ease;
 *   will-change: $mdc-elevation-property, opacity;
 * }
 * ```
 */
/**
 * Applies the correct css rules needed to have an element transition between elevations.
 * This mixin should be applied to elements whose elevation values will change depending on their
 * context (e.g. when active or disabled).
 */
/**
 * Creates a rule that will be applied when an MDC-Web component is within the context of an RTL layout.
 *
 * Usage Example:
 * ```scss
 * .mdc-foo {
 *   position: absolute;
 *   left: 0;
 *
 *   @include mdc-rtl {
 *     left: auto;
 *     right: 0;
 *   }
 *
 *   &__bar {
 *     margin-left: 4px;
 *     @include mdc-rtl(".mdc-foo") {
 *       margin-left: auto;
 *       margin-right: 4px;
 *     }
 *   }
 * }
 *
 * .mdc-foo--mod {
 *   padding-left: 4px;
 *
 *   @include mdc-rtl {
 *     padding-left: auto;
 *     padding-right: 4px;
 *   }
 * }
 * ```
 *
 * Note that this works by checking for [dir="rtl"] on an ancestor element. While this will work
 * in most cases, it will in some cases lead to false negatives, e.g.
 *
 * ```html
 * <html dir="rtl">
 *   <!-- ... -->
 *   <div dir="ltr">
 *     <div class="mdc-foo">Styled incorrectly as RTL!</div>
 *   </div>
 * </html>
 * ```
 *
 * In the future, selectors such as :dir (http://mdn.io/:dir) will help us mitigate this.
 */
/**
 * Takes a base box-model property - e.g. margin / border / padding - along with a default
 * direction and value, and emits rules which apply the value to the
 * "<base-property>-<default-direction>" property by default, but flips the direction
 * when within an RTL context.
 *
 * For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-box(margin, left, 8px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-left: 8px;
 *
 *   @include mdc-rtl {
 *     margin-right: 8px;
 *     margin-left: 0;
 *   }
 * }
 * ```
 * whereas:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-box(margin, right, 8px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-right: 8px;
 *
 *   @include mdc-rtl {
 *     margin-right: 0;
 *     margin-left: 8px;
 *   }
 * }
 * ```
 *
 * You can also pass a 4th optional $root-selector argument which will be forwarded to `mdc-rtl`,
 * e.g. `@include mdc-rtl-reflexive-box-property(margin, left, 8px, ".mdc-component")`.
 *
 * Note that this function will always zero out the original value in an RTL context. If you're
 * trying to flip the values, use mdc-rtl-reflexive-property().
 */
/**
 * Takes a base property and emits rules that assign <base-property>-left to <left-value> and
 * <base-property>-right to <right-value> in a LTR context, and vice versa in a RTL context.
 * For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-property(margin, auto, 12px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-left: auto;
 *   margin-right: 12px;
 *
 *   @include mdc-rtl {
 *     margin-left: 12px;
 *     margin-right: auto;
 *   }
 * }
 * ```
 *
 * A 4th optional $root-selector argument can be given, which will be passed to `mdc-rtl`.
 */
/**
 * Takes an argument specifying a horizontal position property (either "left" or "right") as well
 * as a value, and applies that value to the specified position in a LTR context, and flips it in a
 * RTL context. For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-position(left, 0);
 *   position: absolute;
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 *  .mdc-foo {
 *    position: absolute;
 *    left: 0;
 *    right: initial;
 *
 *    @include mdc-rtl {
 *      right: 0;
 *      left: initial;
 *    }
 *  }
 * ```
 * An optional third $root-selector argument may also be given, which is passed to `mdc-rtl`.
 */
/*
  Precomputed linear color channel values, for use in contrast calculations.
  See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests

  Algorithm, for c in 0 to 255:
  f(c) {
    c = c / 255;
    return c < 0.03928 ? c / 12.92 : Math.pow((c + 0.055) / 1.055, 2.4);
  }

  This lookup table is needed since there is no `pow` in SASS.
*/
/**
 * Calculate the luminance for a color.
 * See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
 */
/**
 * Calculate the contrast ratio between two colors.
 * See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
 */
/**
 * Determine whether to use dark or light text on top of given color.
 * Returns "dark" for dark text and "light" for light text.
 */
/*
  Main theme colors.
  If you're a user customizing your color scheme in SASS, these are probably the only variables you need to change.
*/
/* Indigo 500 */
/* Pink A200 */
/* White */
/* Which set of text colors to use for each main theme color (light or dark) */
/* Text colors according to light vs dark and text type */
/* Primary text colors for each of the theme colors */
/**
 * Applies the correct theme color style to the specified property.
 * $property is typically color or background-color, but can be any CSS property that accepts color values.
 * $style should be one of the map keys in $mdc-theme-property-values (_variables.scss).
 */
/**
 * Creates a rule to be used in MDC-Web components for dark theming, and applies the provided contents.
 * Should provide the $root-selector option if applied to anything other than the root selector.
 * When used with a modifier class, provide a second argument of `true` for the $compound parameter
 * to specify that this should be attached as a compound class.
 *
 * Usage example:
 *
 * ```scss
 * .mdc-foo {
 *   color: black;
 *
 *   @include mdc-theme-dark {
 *     color: white;
 *   }
 *
 *   &__bar {
 *     background: black;
 *
 *     @include mdc-theme-dark(".mdc-foo") {
 *       background: white;
 *     }
 *   }
 * }
 *
 * .mdc-foo--disabled {
 *   opacity: .38;
 *
 *   @include mdc-theme-dark(".mdc-foo", true) {
 *     opacity: .5;
 *   }
 * }
 * ```
 */
/* TODO(sgomes): Figure out what to do about desktop font sizes. */
/* TODO(sgomes): Figure out what to do about i18n and i18n font sizes. */
/**
 * Applies styles to the different types of icons that can exist in toolbars.
 * Both .mdc-toolbar__icon and .mdc-toolbar__icon--menu share all styles except for
 * horizontal padding.
 */
.mdc-toolbar {
  display: flex;
  position: relative;
  flex-direction: column;
  justify-content: space-between;
  width: 100%;
  box-sizing: border-box;
  background-color: #076969;
  background-color: var(--mdc-theme-primary, #076969);
  color: white;
  color: var(--mdc-theme-text-primary-on-primary, white); }

.mdc-toolbar__row {
  display: flex;
  position: relative;
  align-items: center;
  width: 100%;
  height: auto;
  min-height: 64px;
  box-sizing: border-box; }

@media (max-width: 959px) and (orientation: landscape) {
  .mdc-toolbar__row {
    min-height: 48px; } }

@media (max-width: 599px) {
  .mdc-toolbar__row {
    min-height: 56px; } }

.mdc-toolbar__section {
  display: inline-flex;
  flex: 1;
  align-items: flex-start;
  justify-content: center;
  min-width: 0;
  height: 100%;
  z-index: 1; }

.mdc-toolbar__section--align-start {
  justify-content: flex-start;
  order: -1; }

.mdc-toolbar__section--align-end {
  justify-content: flex-end;
  order: 1; }

.mdc-toolbar__title {
  font-family: Roboto, sans-serif;
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  font-size: 1.25rem;
  font-weight: 500;
  letter-spacing: 0.02em;
  line-height: 2rem;
  align-self: center;
  margin: 0;
  margin-left: 24px;
  padding: 16px 0;
  line-height: 1.5rem;
  text-overflow: ellipsis;
  white-space: nowrap;
  overflow: hidden;
  z-index: 1; }

.mdc-toolbar__icon {
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 16px 8px;
  border: none;
  background-color: inherit;
  color: inherit;
  text-decoration: none;
  color: white;
  color: var(--mdc-theme-text-primary-on-primary, white); }

.mdc-toolbar__icon:last-child {
  padding-right: 16px; }

.mdc-toolbar__icon--menu {
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 16px;
  border: none;
  background-color: inherit;
  color: inherit;
  text-decoration: none;
  color: white;
  color: var(--mdc-theme-text-primary-on-primary, white);
  padding: 16px 24px; }

.mdc-toolbar__icon--menu + .mdc-toolbar__title {
  margin-left: 8px; }

@media (max-width: 599px) {
  .mdc-toolbar__icon--menu {
    padding: 16px; }
  .mdc-toolbar__icon:last-child {
    padding: 16px 8px; }
  .mdc-toolbar__title {
    margin-left: 16px !important; } }

.mdc-toolbar--fixed {
  position: fixed;
  top: 0;
  left: 0;
  z-index: 4;
  box-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2), 0px 4px 5px 0px rgba(0, 0, 0, 0.14), 0px 1px 10px 0px rgba(0, 0, 0, 0.12); }

.mdc-toolbar--flexible {
  --mdc-toolbar-ratio-to-extend-flexible: 4; }

.mdc-toolbar--flexible .mdc-toolbar__row:first-child {
  height: 256px;
  height: calc(64px * var(--mdc-toolbar-ratio-to-extend-flexible, 4)); }

@media (max-width: 599px) {
  .mdc-toolbar--flexible .mdc-toolbar__row:first-child {
    height: 224px;
    height: calc(56px * var(--mdc-toolbar-ratio-to-extend-flexible, 4)); } }

.mdc-toolbar--flexible .mdc-toolbar__row:first-child::after {
  position: absolute;
  content: ""; }

.mdc-toolbar--flexible-default-behavior .mdc-toolbar__title {
  font-family: Roboto, sans-serif;
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  font-size: 2.125rem;
  font-weight: 400;
  letter-spacing: normal;
  line-height: 2.5rem;
  align-self: flex-end;
  line-height: 1.5rem; }

.mdc-toolbar--flexible-default-behavior .mdc-toolbar__row:first-child::after {
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  transition: opacity .2s ease;
  opacity: 1; }

.mdc-toolbar--flexible-default-behavior.mdc-toolbar--flexible-space-minimized .mdc-toolbar__row:first-child::after {
  opacity: 0; }

.mdc-toolbar--flexible-default-behavior.mdc-toolbar--flexible-space-minimized .mdc-toolbar__title {
  font-weight: 500; }

.mdc-toolbar--waterfall.mdc-toolbar--fixed {
  box-shadow: 0px 0px 0px 0px rgba(0, 0, 0, 0.2), 0px 0px 0px 0px rgba(0, 0, 0, 0.14), 0px 0px 0px 0px rgba(0, 0, 0, 0.12);
  transition: box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);
  will-change: box-shadow; }

.mdc-toolbar--waterfall.mdc-toolbar--fixed.mdc-toolbar--flexible-space-minimized {
  box-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2), 0px 4px 5px 0px rgba(0, 0, 0, 0.14), 0px 1px 10px 0px rgba(0, 0, 0, 0.12); }

.mdc-toolbar--waterfall.mdc-toolbar--fixed.mdc-toolbar--fixed-lastrow-only.mdc-toolbar--flexible-space-minimized {
  box-shadow: 0px 0px 0px 0px rgba(0, 0, 0, 0.2), 0px 0px 0px 0px rgba(0, 0, 0, 0.14), 0px 0px 0px 0px rgba(0, 0, 0, 0.12); }

.mdc-toolbar--waterfall.mdc-toolbar--fixed.mdc-toolbar--fixed-lastrow-only.mdc-toolbar--fixed-at-last-row {
  box-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2), 0px 4px 5px 0px rgba(0, 0, 0, 0.14), 0px 1px 10px 0px rgba(0, 0, 0, 0.12); }

.mdc-toolbar-fixed-adjust {
  margin-top: 64px; }

@media (max-width: 959px) and (orientation: landscape) {
  .mdc-toolbar-fixed-adjust {
    margin-top: 48px; } }

@media (max-width: 599px) {
  .mdc-toolbar-fixed-adjust {
    margin-top: 56px; } }

.mdc-toolbar__section--shrink-to-fit {
  flex: none; }

/* TODO(sgomes): Figure out what to do about desktop font sizes. */
/* TODO(sgomes): Figure out what to do about i18n and i18n font sizes. */
/* TODO(sgomes): Figure out what to do about desktop font sizes. */
/* TODO(sgomes): Figure out what to do about i18n and i18n font sizes. */
.mdc-typography {
  font-family: Roboto, sans-serif;
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased; }

.mdc-typography--display4 {
  font-family: Roboto, sans-serif;
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  font-size: 7rem;
  font-weight: 300;
  letter-spacing: -0.04em;
  line-height: 7rem; }

.mdc-typography--adjust-margin.mdc-typography--display4 {
  margin: -1rem 0 3.5rem -0.085em; }

.mdc-typography--display3 {
  font-family: Roboto, sans-serif;
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  font-size: 3.5rem;
  font-weight: 400;
  letter-spacing: -0.02em;
  line-height: 3.5rem; }

.mdc-typography--adjust-margin.mdc-typography--display3 {
  margin: -8px 0 64px -0.07em; }

.mdc-typography--display2 {
  font-family: Roboto, sans-serif;
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  font-size: 2.813rem;
  font-weight: 400;
  letter-spacing: normal;
  line-height: 3rem; }

.mdc-typography--adjust-margin.mdc-typography--display2 {
  margin: -0.5rem 0 4rem -0.07em; }

.mdc-typography--display1 {
  font-family: Roboto, sans-serif;
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  font-size: 2.125rem;
  font-weight: 400;
  letter-spacing: normal;
  line-height: 2.5rem; }

.mdc-typography--adjust-margin.mdc-typography--display1 {
  margin: -0.5rem 0 4rem -0.07em; }

.mdc-typography--headline {
  font-family: Roboto, sans-serif;
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  font-size: 1.5rem;
  font-weight: 400;
  letter-spacing: normal;
  line-height: 2rem; }

.mdc-typography--adjust-margin.mdc-typography--headline {
  margin: -0.5rem 0 1rem -0.06em; }

.mdc-typography--title {
  font-family: Roboto, sans-serif;
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  font-size: 1.25rem;
  font-weight: 500;
  letter-spacing: 0.02em;
  line-height: 2rem; }

.mdc-typography--adjust-margin.mdc-typography--title {
  margin: -0.5rem 0 1rem -0.05em; }

.mdc-typography--subheading2 {
  font-family: Roboto, sans-serif;
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  font-size: 1rem;
  font-weight: 400;
  letter-spacing: 0.04em;
  line-height: 1.75rem; }

.mdc-typography--adjust-margin.mdc-typography--subheading2 {
  margin: -0.5rem 0 1rem -0.06em; }

.mdc-typography--subheading1 {
  font-family: Roboto, sans-serif;
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  font-size: 0.938rem;
  font-weight: 400;
  letter-spacing: 0.04em;
  line-height: 1.5rem; }

.mdc-typography--adjust-margin.mdc-typography--subheading1 {
  margin: -0.313rem 0 0.813rem -0.06em; }

.mdc-typography--body2 {
  font-family: Roboto, sans-serif;
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  font-size: 0.875rem;
  font-weight: 500;
  letter-spacing: 0.04em;
  line-height: 1.5rem; }

.mdc-typography--adjust-margin.mdc-typography--body2 {
  margin: -0.25rem 0 0.75rem 0; }

.mdc-typography--body1 {
  font-family: Roboto, sans-serif;
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  font-size: 0.875rem;
  font-weight: 400;
  letter-spacing: 0.04em;
  line-height: 1.25rem; }

.mdc-typography--adjust-margin.mdc-typography--body1 {
  margin: -0.25rem 0 0.75rem 0; }

.mdc-typography--caption {
  font-family: Roboto, sans-serif;
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  font-size: 0.75rem;
  font-weight: 400;
  letter-spacing: 0.08em;
  line-height: 1.25rem; }

.mdc-typography--adjust-margin.mdc-typography--caption {
  margin: -0.5rem 0 1rem -0.04em; }

.YTClearSpace {
  margin: 12rem; }

.YTPlayer {
  position: fixed;
  bottom: 0.5rem;
  left: 0.5rem; }
